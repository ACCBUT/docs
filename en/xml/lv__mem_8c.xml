<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lv__mem_8c" kind="file" language="C++">
    <compoundname>lv_mem.c</compoundname>
    <includes refid="lv__mem_8h" local="yes">lv_mem.h</includes>
    <includes refid="lv__math_8h" local="yes">lv_math.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="3202">
        <label>stdint.h</label>
      </node>
      <node id="3203">
        <label>stddef.h</label>
      </node>
      <node id="3201">
        <label>../../../lv_conf.h</label>
      </node>
      <node id="3206">
        <label>string.h</label>
      </node>
      <node id="3204">
        <label>lv_log.h</label>
        <link refid="lv__log_8h"/>
        <childnode refid="3201" relation="include">
        </childnode>
        <childnode refid="3202" relation="include">
        </childnode>
      </node>
      <node id="3205">
        <label>lv_math.h</label>
        <link refid="lv__math_8h"/>
        <childnode refid="3202" relation="include">
        </childnode>
      </node>
      <node id="3199">
        <label>/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c</label>
        <link refid="lv__mem_8c"/>
        <childnode refid="3200" relation="include">
        </childnode>
        <childnode refid="3205" relation="include">
        </childnode>
        <childnode refid="3206" relation="include">
        </childnode>
      </node>
      <node id="3200">
        <label>lv_mem.h</label>
        <link refid="lv__mem_8h"/>
        <childnode refid="3201" relation="include">
        </childnode>
        <childnode refid="3202" relation="include">
        </childnode>
        <childnode refid="3203" relation="include">
        </childnode>
        <childnode refid="3204" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="unionlv__mem__header__t" prot="public">lv_mem_header_t</innerclass>
    <innerclass refid="structlv__mem__ent__t" prot="public">lv_mem_ent_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="lv__mem_8c_1ab8bcf165190363e3533a1adf4ad3b4d5" prot="public" static="no">
        <name>LV_MEM_ADD_JUNK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="22" column="9" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lv__mem_8c_1a721e5a71eeea3ba55be6d1f033df001d" prot="public" static="no">
        <name>MEM_UNIT</name>
        <initializer>uint32_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="27" column="10" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lv__mem_8c_1a47655d60f2a6ca97d9ef2d947b325d78" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* work_mem</definition>
        <argsstring></argsstring>
        <name>work_mem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="68" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lv__mem_8c_1aa22c6c6d14deb6349241b77c65819f17" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t zero_mem</definition>
        <argsstring></argsstring>
        <name>zero_mem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="71" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lv__mem_8c_1aaf9b2e166a56c2b9868f926d887dc0f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref> *</type>
        <definition>static lv_mem_ent_t * ent_get_next</definition>
        <argsstring>(lv_mem_ent_t *act_e)</argsstring>
        <name>ent_get_next</name>
        <param>
          <type><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref> *</type>
          <declname>act_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Give the next entry after &apos;act_e&apos; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>act_e</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an entry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to an entry after &apos;act_e&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="59" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="386" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1a4fba075cad7742ba26674f91e90bb564" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * ent_alloc</definition>
        <argsstring>(lv_mem_ent_t *e, uint32_t size)</argsstring>
        <name>ent_alloc</name>
        <param>
          <type><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to do the real allocation with a given size <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>try to allocate to this entry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the new memory in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the allocated memory or NULL if not enough memory in the entry </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="60" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="408" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1ad758ee9708fbfaa8b1c4b9d6c6f8650c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ent_trunc</definition>
        <argsstring>(lv_mem_ent_t *e, uint32_t size)</argsstring>
        <name>ent_trunc</name>
        <param>
          <type><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Truncate the data of entry to the given size <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an entry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>new size in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="61" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="431" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1ab6a1069ab1e16cca811cd4203cd97ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_mem_init</definition>
        <argsstring>(void)</argsstring>
        <name>lv_mem_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiaiize the dyn_mem module (work memory and other variables) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="84" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="84" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1a8b07007b17d5a3704eb34d225afe784c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_mem_alloc</definition>
        <argsstring>(uint32_t size)</argsstring>
        <name>lv_mem_alloc</name>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a memory dynamically <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the memory to allocate in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="108" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="108" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1a4261e9d9b586a46a528a138d4c82b0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_mem_free</definition>
        <argsstring>(const void *data)</argsstring>
        <name>lv_mem_free</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an allocated data <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an allocated memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="174" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="174" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1a2d9e9b591bbc1b5705727817618cc39c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_mem_realloc</definition>
        <argsstring>(void *data_p, uint32_t new_size)</argsstring>
        <name>lv_mem_realloc</name>
        <param>
          <type>void *</type>
          <declname>data_p</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reallocate a memory with a new size. The old content will be kept. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an allocated memory. Its content will be copied to the new memory block and freed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired new size in byte </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="223" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="223" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1a4f285c9101196fcf34987bf46f4ce163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_mem_defrag</definition>
        <argsstring>(void)</argsstring>
        <name>lv_mem_defrag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Join the adjacent free memory blocks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="275" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="275" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1a870e4824ad667a372cbe58b2614892a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_mem_monitor</definition>
        <argsstring>(lv_mem_monitor_t *mon_p)</argsstring>
        <name>lv_mem_monitor</name>
        <param>
          <type><ref refid="structlv__mem__monitor__t" kindref="compound">lv_mem_monitor_t</ref> *</type>
          <declname>mon_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Give information about the work memory of dynamic allocation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mon_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a dm_mon_p variable, the result of the analysis will be stored here </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="319" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="319" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="lv__mem_8c_1a0d33857fa0e11d790ce4c6bf48b2b990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t lv_mem_get_size</definition>
        <argsstring>(const void *data)</argsstring>
        <name>lv_mem_get_size</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Give the size of an allocated memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an allocated memory </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of data memory in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" line="357" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c" bodystart="357" bodyend="365"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>General and portable implementation of malloc and free. The dynamic memory monitoring is also supported. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>INCLUDES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv__mem_8h" kindref="compound">lv_mem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv__math_8h" kindref="compound">lv_math.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>LV_MEM_CUSTOM_INCLUDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>DEFINES</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*Add<sp/>memory<sp/>junk<sp/>on<sp/>alloc<sp/>(0xaa)<sp/>and<sp/>free(0xbb)<sp/>(just<sp/>for<sp/>testing<sp/>purposes)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LV_MEM_ADD_JUNK<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LV_MEM_ENV64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_UNIT<sp/>uint64_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_UNIT<sp/>uint32_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>TYPEDEFS</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_ENABLE_GC<sp/>==<sp/>0<sp/></highlight><highlight class="comment">/*gc<sp/>custom<sp/>allocations<sp/>must<sp/>not<sp/>include<sp/>header*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*The<sp/>size<sp/>of<sp/>this<sp/>union<sp/>must<sp/>be<sp/>4<sp/>bytes<sp/>(uint32_t)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="unionlv__mem__header__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__mem_8c_1a721e5a71eeea3ba55be6d1f033df001d" kindref="member">MEM_UNIT</ref><sp/>used<sp/>:<sp/>1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1:<sp/>if<sp/>the<sp/>entry<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__mem_8c_1a721e5a71eeea3ba55be6d1f033df001d" kindref="member">MEM_UNIT</ref><sp/>d_size<sp/>:<sp/>31;<sp/></highlight><highlight class="comment">//<sp/>Size<sp/>off<sp/>the<sp/>data<sp/>(1<sp/>means<sp/>4<sp/>bytes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>s;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__mem_8c_1a721e5a71eeea3ba55be6d1f033df001d" kindref="member">MEM_UNIT</ref><sp/>header;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>header<sp/>(used<sp/>+<sp/>d_size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/><ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structlv__mem__ent__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref><sp/>header;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>first_data;<sp/></highlight><highlight class="comment">/*First<sp/>data<sp/>byte<sp/>in<sp/>the<sp/>allocated<sp/>data<sp/>(Just<sp/>for<sp/>easily<sp/>create<sp/>a<sp/>pointer)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LV_ENABLE_GC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>STATIC<sp/>PROTOTYPES</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>ent_get_next(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>act_e);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ent_alloc(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e,<sp/>uint32_t<sp/>size);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ent_trunc(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e,<sp/>uint32_t<sp/>size);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>STATIC<sp/>VARIABLES</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>work_mem;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>zero_mem;<sp/></highlight><highlight class="comment">/*Give<sp/>the<sp/>address<sp/>of<sp/>this<sp/>variable<sp/>if<sp/>0<sp/>byte<sp/>should<sp/>be<sp/>allocated*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>MACROS</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GLOBAL<sp/>FUNCTIONS</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__mem_8c_1ab6a1069ab1e16cca811cd4203cd97ccc" kindref="member">lv_mem_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_ADR<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Allocate<sp/>a<sp/>large<sp/>array<sp/>to<sp/>store<sp/>the<sp/>dynamically<sp/>allocated<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="lv__conf__checker_8h_1a5e394cdeebbb7698b06d4646e2dd6bd7" kindref="member">LV_MEM_ATTR</ref><sp/><ref refid="lv__mem_8c_1a721e5a71eeea3ba55be6d1f033df001d" kindref="member">MEM_UNIT</ref><sp/>work_mem_int[<ref refid="lv__conf__checker_8h_1aeff108006de09a570aac88c106497ed6" kindref="member">LV_MEM_SIZE</ref><sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lv__mem_8c_1a721e5a71eeea3ba55be6d1f033df001d" kindref="member">MEM_UNIT</ref>)];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>work_mem<sp/>=<sp/>(uint8_t<sp/>*)work_mem_int;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>work_mem<sp/>=<sp/>(uint8_t<sp/>*)<ref refid="lv__conf__checker_8h_1aec056337ffb77039252d2b7b68be14da" kindref="member">LV_MEM_ADR</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>full<sp/>=<sp/>(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)work_mem;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>full-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*The<sp/>total<sp/>mem<sp/>size<sp/>id<sp/>reduced<sp/>by<sp/>the<sp/>first<sp/>header<sp/>and<sp/>the<sp/>close<sp/>patterns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>full-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>=<sp/><ref refid="lv__conf__checker_8h_1aeff108006de09a570aac88c106497ed6" kindref="member">LV_MEM_SIZE</ref><sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__mem_8c_1a8b07007b17d5a3704eb34d225afe784c" kindref="member">lv_mem_alloc</ref>(uint32_t<sp/>size)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;zero_mem;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LV_MEM_ENV64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Round<sp/>the<sp/>size<sp/>up<sp/>to<sp/>8*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&amp;<sp/>0x7)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>size<sp/>&amp;<sp/>(~0x7);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Round<sp/>the<sp/>size<sp/>up<sp/>to<sp/>4*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&amp;<sp/>0x3)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>size<sp/>&amp;<sp/>(~0x3);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>alloc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Use<sp/>the<sp/>built-in<sp/>allocators*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>for<sp/>a<sp/>appropriate<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>next<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>ent_get_next(e);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>next<sp/>entry<sp/>then<sp/>try<sp/>to<sp/>allocate<sp/>there*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc<sp/>=<sp/>ent_alloc(e,<sp/>size);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>if<sp/>there<sp/>is<sp/>not<sp/>next<sp/>entry<sp/>OR<sp/>the<sp/>alloc.<sp/>is<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(e<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>alloc<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*Use<sp/>custom,<sp/>user<sp/>defined<sp/>malloc<sp/>function*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_ENABLE_GC<sp/>==<sp/>1<sp/></highlight><highlight class="comment">/*gc<sp/>must<sp/>not<sp/>include<sp/>header*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc<sp/>=<sp/>LV_MEM_CUSTOM_ALLOC(size);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LV_ENABLE_GC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Allocate<sp/>a<sp/>header<sp/>too<sp/>to<sp/>store<sp/>the<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc<sp/>=<sp/>LV_MEM_CUSTOM_ALLOC(size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alloc<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)alloc)-&gt;header.s.d_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)alloc)-&gt;header.s.used<sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc<sp/>=<sp/>&amp;((<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)alloc)-&gt;first_data;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LV_ENABLE_GC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LV_MEM_CUSTOM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_ADD_JUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alloc<sp/>!=<sp/>NULL)<sp/>memset(alloc,<sp/>0xaa,<sp/>size);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alloc<sp/>==<sp/>NULL)<sp/><ref refid="lv__log_8h_1a232c937133a815f441846f086f6aeb9b" kindref="member">LV_LOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>allocate<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alloc;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__mem_8c_1a4261e9d9b586a46a528a138d4c82b0ec" kindref="member">lv_mem_free</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data<sp/>==<sp/>&amp;zero_mem)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_ADD_JUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>memset((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)data,<sp/>0xbb,<sp/><ref refid="lv__mem_8c_1a0d33857fa0e11d790ce4c6bf48b2b990" kindref="member">lv_mem_get_size</ref>(data));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_ENABLE_GC<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*e<sp/>points<sp/>to<sp/>the<sp/>header*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e<sp/>=<sp/>(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)((uint8_t<sp/>*)data<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_AUTO_DEFRAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>a<sp/>simple<sp/>defrag.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Join<sp/>the<sp/>following<sp/>free<sp/>entries<sp/>after<sp/>this*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e_next;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>e_next<sp/>=<sp/>ent_get_next(e);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(e_next<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e_next-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>+=<sp/>e_next-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_next<sp/>=<sp/>ent_get_next(e_next);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*Use<sp/>custom,<sp/>user<sp/>defined<sp/>free<sp/>function*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_ENABLE_GC<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>LV_MEM_CUSTOM_FREE(e);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>LV_MEM_CUSTOM_FREE((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)data);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LV_ENABLE_GC*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor">#if<sp/>LV_ENABLE_GC<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__mem_8c_1a2d9e9b591bbc1b5705727817618cc39c" kindref="member">lv_mem_realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data_p,<sp/>uint32_t<sp/>new_size)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*data_p<sp/>could<sp/>be<sp/>previously<sp/>freed<sp/>pointer<sp/>(in<sp/>this<sp/>case<sp/>it<sp/>is<sp/>invalid)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e<sp/>=<sp/>(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)((uint8_t<sp/>*)data_p<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>old_size<sp/>=<sp/><ref refid="lv__mem_8c_1a0d33857fa0e11d790ce4c6bf48b2b990" kindref="member">lv_mem_get_size</ref>(data_p);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(old_size<sp/>==<sp/>new_size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_p;<sp/></highlight><highlight class="comment">/*Also<sp/>avoid<sp/>reallocating<sp/>the<sp/>same<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Truncate<sp/>the<sp/>memory<sp/>if<sp/>the<sp/>new<sp/>size<sp/>is<sp/>smaller.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_size<sp/>&lt;<sp/>old_size)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e<sp/>=<sp/>(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)((uint8_t<sp/>*)data_p<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent_trunc(e,<sp/>new_size);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;e-&gt;<ref refid="structlv__mem__ent__t_1ac21f1763ba675874e5907cba236c82e4" kindref="member">first_data</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>new_p;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>new_p<sp/>=<sp/><ref refid="lv__mem_8c_1a8b07007b17d5a3704eb34d225afe784c" kindref="member">lv_mem_alloc</ref>(new_size);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_p<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>data_p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Copy<sp/>the<sp/>old<sp/>data<sp/>to<sp/>the<sp/>new.<sp/>Use<sp/>the<sp/>smaller<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(old_size<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(new_p,<sp/>data_p,<sp/><ref refid="lv__math_8h_1a820d36c04e90020db62f563358910807" kindref="member">LV_MATH_MIN</ref>(new_size,<sp/>old_size));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__mem_8c_1a4261e9d9b586a46a528a138d4c82b0ec" kindref="member">lv_mem_free</ref>(data_p);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_p<sp/>==<sp/>NULL)<sp/><ref refid="lv__log_8h_1a232c937133a815f441846f086f6aeb9b" kindref="member">LV_LOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>allocate<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_p;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>LV_ENABLE_GC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__mem_8c_1a2d9e9b591bbc1b5705727817618cc39c" kindref="member">lv_mem_realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data_p,<sp/>uint32_t<sp/>new_size)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>new_p<sp/>=<sp/>LV_MEM_CUSTOM_REALLOC(data_p,<sp/>new_size);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_p<sp/>==<sp/>NULL)<sp/><ref refid="lv__log_8h_1a232c937133a815f441846f086f6aeb9b" kindref="member">LV_LOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>allocate<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_p;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>lv_enable_gc<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__mem_8c_1a4f285c9101196fcf34987bf46f4ce163" kindref="member">lv_mem_defrag</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e_free;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e_next;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>e_free<sp/>=<sp/>ent_get_next(NULL);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Search<sp/>the<sp/>next<sp/>free<sp/>entry*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(e_free<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e_free-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_free<sp/>=<sp/>ent_get_next(e_free);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e_free<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Joint<sp/>the<sp/>following<sp/>free<sp/>entries<sp/>to<sp/>the<sp/>free*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_next<sp/>=<sp/>ent_get_next(e_free);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(e_next<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e_next-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_free-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>+=<sp/>e_next-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(e_next-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_next<sp/>=<sp/>ent_get_next(e_next);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e_next<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Continue<sp/>from<sp/>the<sp/>lastly<sp/>checked<sp/>entry*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_free<sp/>=<sp/>e_next;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__mem_8c_1a870e4824ad667a372cbe58b2614892a2" kindref="member">lv_mem_monitor</ref>(<ref refid="structlv__mem__monitor__t" kindref="compound">lv_mem_monitor_t</ref><sp/>*<sp/>mon_p)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Init<sp/>the<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(mon_p,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structlv__mem__monitor__t" kindref="compound">lv_mem_monitor_t</ref>));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>ent_get_next(e);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(e<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a46dc7a9d497afe396db3f3da455c15a1" kindref="member">free_cnt</ref>++;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a27adcfe2602ed3d9f91cab48e3b789fd" kindref="member">free_size</ref><sp/>+=<sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>&gt;<sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a2e415ca957da17290eb8055dc0c89982" kindref="member">free_biggest_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a2e415ca957da17290eb8055dc0c89982" kindref="member">free_biggest_size</ref><sp/>=<sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1aa2404ca716ab5481106528be7925bff6" kindref="member">used_cnt</ref>++;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>ent_get_next(e);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1ae61235bccfb5119ca2fe58db1148f48b" kindref="member">total_size</ref><sp/>=<sp/><ref refid="lv__conf__checker_8h_1aeff108006de09a570aac88c106497ed6" kindref="member">LV_MEM_SIZE</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a729716db06d7a5ecb2fea65bdc29e6aa" kindref="member">used_pct</ref><sp/><sp/><sp/>=<sp/>100<sp/>-<sp/>(100U<sp/>*<sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a27adcfe2602ed3d9f91cab48e3b789fd" kindref="member">free_size</ref>)<sp/>/<sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1ae61235bccfb5119ca2fe58db1148f48b" kindref="member">total_size</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a68d42298e5029f634e5a19f27fa7da2e" kindref="member">frag_pct</ref><sp/><sp/><sp/>=<sp/>(uint32_t)mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a2e415ca957da17290eb8055dc0c89982" kindref="member">free_biggest_size</ref><sp/>*<sp/>100U<sp/>/<sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a27adcfe2602ed3d9f91cab48e3b789fd" kindref="member">free_size</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a68d42298e5029f634e5a19f27fa7da2e" kindref="member">frag_pct</ref><sp/><sp/><sp/>=<sp/>100<sp/>-<sp/>mon_p-&gt;<ref refid="structlv__mem__monitor__t_1a68d42298e5029f634e5a19f27fa7da2e" kindref="member">frag_pct</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor">#if<sp/>LV_ENABLE_GC<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">uint32_t<sp/><ref refid="lv__mem_8c_1a0d33857fa0e11d790ce4c6bf48b2b990" kindref="member">lv_mem_get_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data<sp/>==<sp/>&amp;zero_mem)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e<sp/>=<sp/>(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)((uint8_t<sp/>*)data<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>LV_ENABLE_GC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">uint32_t<sp/><ref refid="lv__mem_8c_1a0d33857fa0e11d790ce4c6bf48b2b990" kindref="member">lv_mem_get_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LV_MEM_CUSTOM_GET_SIZE(data);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LV_ENABLE_GC*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/><sp/><sp/>STATIC<sp/>FUNCTIONS</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_MEM_CUSTOM<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>ent_get_next(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>act_e)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>next_e<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(act_e<sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*NULL<sp/>means:<sp/>get<sp/>the<sp/>first<sp/>entry*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_e<sp/>=<sp/>(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)work_mem;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*Get<sp/>the<sp/>next<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/>data<sp/>=<sp/>&amp;act_e-&gt;<ref refid="structlv__mem__ent__t_1ac21f1763ba675874e5907cba236c82e4" kindref="member">first_data</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_e<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)&amp;data[act_e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref>];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(&amp;next_e-&gt;<ref refid="structlv__mem__ent__t_1ac21f1763ba675874e5907cba236c82e4" kindref="member">first_data</ref><sp/>&gt;=<sp/>&amp;work_mem[<ref refid="lv__conf__checker_8h_1aeff108006de09a570aac88c106497ed6" kindref="member">LV_MEM_SIZE</ref>])<sp/>next_e<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_e;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ent_alloc(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e,<sp/>uint32_t<sp/>size)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>alloc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>the<sp/>memory<sp/>is<sp/>free<sp/>and<sp/>big<sp/>enough<sp/>then<sp/>use<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Truncate<sp/>the<sp/>entry<sp/>to<sp/>the<sp/>desired<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent_trunc(e,<sp/>size),</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Save<sp/>the<sp/>allocated<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc<sp/>=<sp/>&amp;e-&gt;<ref refid="structlv__mem__ent__t_1ac21f1763ba675874e5907cba236c82e4" kindref="member">first_data</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alloc;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ent_trunc(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>e,<sp/>uint32_t<sp/>size)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LV_MEM_ENV64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Round<sp/>the<sp/>size<sp/>up<sp/>to<sp/>8*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&amp;<sp/>0x7)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>size<sp/>&amp;<sp/>(~0x7);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Round<sp/>the<sp/>size<sp/>up<sp/>to<sp/>4*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&amp;<sp/>0x3)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>size<sp/>&amp;<sp/>(~0x3);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Don&apos;t<sp/>let<sp/>empty<sp/>space<sp/>only<sp/>for<sp/>a<sp/>header<sp/>without<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>==<sp/>size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>))<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>new<sp/>entry<sp/>after<sp/>the<sp/>current<sp/>if<sp/>there<sp/>is<sp/>space<sp/>for<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>!=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/>e_data<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;e-&gt;<ref refid="structlv__mem__ent__t_1ac21f1763ba675874e5907cba236c82e4" kindref="member">first_data</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*<sp/>after_new_e<sp/><sp/><sp/>=<sp/>(<ref refid="structlv__mem__ent__t" kindref="compound">lv_mem_ent_t</ref><sp/>*)&amp;e_data[size];</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after_new_e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1a7d2a7ad2987079d0c15cba8252180375" kindref="member">used</ref><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after_new_e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>=<sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>-<sp/>size<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionlv__mem__header__t" kindref="compound">lv_mem_header_t</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>new<sp/>size<sp/>for<sp/>the<sp/>original<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="structlv__mem__ent__t_1a881c1d324fe5d015417e7edb5825af87" kindref="member">header</ref>.<ref refid="unionlv__mem__header__t_1af50d40333c1dea1e49598233fd9502a4" kindref="member">s</ref>.<ref refid="unionlv__mem__header__t_1ab6d6521ca9d54b6554692fca21fb5ae7" kindref="member">d_size</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_mem.c"/>
  </compounddef>
</doxygen>
