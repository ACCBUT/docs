# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, LVGL LLC
# This file is distributed under the same license as the LVGL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LVGL v7.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-21 13:32+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../intro/index.md:6
msgid "Introduction"
msgstr ""

#: ../intro/index.md:8
msgid "LVGL (Light and Versatile Graphics Library) is a free and open-source graphics library providing everything you need to create embedded GUI with easy-to-use graphical elements, beautiful visual effects and low memory footprint."
msgstr ""

#: ../intro/index.md:10
msgid "Key features"
msgstr ""

#: ../intro/index.md:11
msgid "Powerful building blocks such as buttons, charts, lists, sliders, images etc."
msgstr ""

#: ../intro/index.md:12
msgid "Advanced graphics with animations, anti-aliasing, opacity, smooth scrolling"
msgstr ""

#: ../intro/index.md:13
msgid "Various input devices such as touchpad, mouse, keyboard, encoder etc."
msgstr ""

#: ../intro/index.md:14
msgid "Multi-language support with UTF-8 encoding"
msgstr ""

#: ../intro/index.md:15
msgid "Multi-display support, i.e. use more TFT, monochrome displays simultaneously"
msgstr ""

#: ../intro/index.md:16
msgid "Fully customizable graphic elements"
msgstr ""

#: ../intro/index.md:17
msgid "Hardware independent to use with any microcontroller or display"
msgstr ""

#: ../intro/index.md:18
msgid "Scalable to operate with little memory (64 kB Flash, 16 kB RAM)"
msgstr ""

#: ../intro/index.md:19
msgid "OS, External memory and GPU supported but not required"
msgstr ""

#: ../intro/index.md:20
msgid "Single frame buffer operation even with advanced graphical effects"
msgstr ""

#: ../intro/index.md:21
msgid "Written in C for maximal compatibility (C++ compatible)"
msgstr ""

#: ../intro/index.md:22
msgid "Simulator to start embedded GUI design on a PC without embedded hardware"
msgstr ""

#: ../intro/index.md:23
msgid "Binding to MicroPython"
msgstr ""

#: ../intro/index.md:24
msgid "Tutorials, examples, themes for rapid GUI design"
msgstr ""

#: ../intro/index.md:25
msgid "Documentation is available as online and offline"
msgstr ""

#: ../intro/index.md:26
msgid "Free and open-source under MIT license"
msgstr ""

#: ../intro/index.md:28
msgid "Requirements"
msgstr ""

#: ../intro/index.md:29
msgid "Basically, every modern controller  (which is able to drive a display( is suitable to run LVGL. The minimal requirements are:"
msgstr ""

#: ../intro/index.md:52
msgid "License"
msgstr ""

#: ../intro/index.md:53
msgid "The LVGL project (including all repositories) is licensed under MIT license. It means you can use it even in commercial projects."
msgstr ""

#: ../intro/index.md:56
msgid "It's not mandatory but we highly appreciate it if you write a few words about your project in the My projects category of the Forum or a private message from lvgl.io."
msgstr ""

#: ../intro/index.md:58
msgid "Although you can get LVGL for free there is a huge work behind it. It's created by a group of volunteers who made it available for you in their free time."
msgstr ""

#: ../intro/index.md:60
msgid "To make the LVGL project sustainable, please consider Contributing to the project. You can choose from many ways of contributions such as simply writing a tweet about you are using LVGL, fixing bugs, translating the documentation, or even becoming a maintainer."
msgstr ""

#: ../intro/index.md:63
msgid "Repository layout"
msgstr ""

#: ../intro/index.md:64
msgid "All repositories of the LVGL project are hosted n GitHub: https://github.com/lvgl"
msgstr ""

#: ../intro/index.md:66
msgid "You fill these repositories there:"
msgstr ""

#: ../intro/index.md:67
msgid "lvgl The library itself"
msgstr ""

#: ../intro/index.md:68
msgid "lv_examples Examples and demos"
msgstr ""

#: ../intro/index.md:69
msgid "lv_drivers Display and input device drivers"
msgstr ""

#: ../intro/index.md:70
msgid "docs Source of the documentation's site (https://docs.lvgl.io)"
msgstr ""

#: ../intro/index.md:71
msgid "blog Source of the blog's site (https://blog.lvgl.io)"
msgstr ""

#: ../intro/index.md:72
msgid "sim Source of the online simulator's site (https://sim.lvgl.io)"
msgstr ""

#: ../intro/index.md:73
msgid "lv_sim_... Simulator projects for various IDEs and platforms"
msgstr ""

#: ../intro/index.md:74
msgid "lv_port_... LVGL ports to development boards"
msgstr ""

#: ../intro/index.md:75
msgid "lv_binding_.. Bindings to other languages"
msgstr ""

#: ../intro/index.md:76
msgid "lv_... Ports to other platforms"
msgstr ""

#: ../intro/index.md:78
msgid "The lvgl,  lv_examples and lv_drivers are the core repositories which gets the most attentions regarding maintenance."
msgstr ""

#: ../intro/index.md:80
msgid "Release policy"
msgstr ""

#: ../intro/index.md:82
msgid "The core repositories follow the rules of Semantic versioning:"
msgstr ""

#: ../intro/index.md:83
msgid "Major versions for incompatible API changes. E.g. v5.0.0, v6.0.0"
msgstr ""

#: ../intro/index.md:84
msgid "Minor version for new but backward-compatible functionalities. E.g. v6.1.0, v6.2.0"
msgstr ""

#: ../intro/index.md:85
msgid "Patch version for backward-compatible bug fixes. E.g. v6.1.1, v6.1.2"
msgstr ""

#: ../intro/index.md:87
msgid "Branches"
msgstr ""

#: ../intro/index.md:88
msgid "The core repositories have at least the following branches:"
msgstr ""

#: ../intro/index.md:89
msgid "master latest version, patches are merged directly here."
msgstr ""

#: ../intro/index.md:90
msgid "dev merge new features here until they are merged into master."
msgstr ""

#: ../intro/index.md:91
msgid "release/vX stable versions of the major releases"
msgstr ""

#: ../intro/index.md:93
msgid "Release cycle"
msgstr ""

#: ../intro/index.md:95
msgid "LVGL has 2 weeks release cycle. On every first and third Tuesday of a month:"
msgstr ""

#: ../intro/index.md:96
msgid "A major, minor or bug fix release is created (based on the new features) from the master branch"
msgstr ""

#: ../intro/index.md:97
msgid "master is merged into release/vX"
msgstr ""

#: ../intro/index.md:98
msgid "Immediately after the release dev is merged into master"
msgstr ""

#: ../intro/index.md:99
msgid "In the upcoming 2 weeks the new features in master can be tested"
msgstr ""

#: ../intro/index.md:100
msgid "Bug fixes are merged directly into master"
msgstr ""

#: ../intro/index.md:101
msgid "After 2 weeks start again from the first point"
msgstr ""

#: ../intro/index.md:103
msgid "Tags"
msgstr ""

#: ../intro/index.md:105
msgid "Tags like vX.Y.Z are created for every release."
msgstr ""

#: ../intro/index.md:107
msgid "Changelog"
msgstr ""

#: ../intro/index.md:109
msgid "The changes are recorded in CHANGELOG.md."
msgstr ""

#: ../intro/index.md:111
msgid "Side projects"
msgstr ""

#: ../intro/index.md:112
msgid "The docs is rebuilt on every release. By default, the latest documentation is displayed which is for the current master branch of lvgl. The documentation of earlier versions is available from the menu on the left."
msgstr ""

#: ../intro/index.md:115
msgid "The simulator, porting, and other projects are updated with best effort. Pull requests are welcome if you updated one of them."
msgstr ""

#: ../intro/index.md:117
msgid "Version support"
msgstr ""

#: ../intro/index.md:118
msgid "In the core repositories each major version has a branch (e.g. release/v6). All the minor and patch releases of that major version are merged there."
msgstr ""

#: ../intro/index.md:120
msgid "It makes possible to add fixed older versions without bothering the newer ones."
msgstr ""

#: ../intro/index.md:122
msgid "All major versions are officially supported for 1 year."
msgstr ""

#: ../intro/index.md:124
msgid "FAQ"
msgstr ""

#: ../intro/index.md:126
msgid "Where can I ask questions?"
msgstr ""

#: ../intro/index.md:127
msgid "You can ask questions in the Forum: https://forum.lvgl.io/."
msgstr ""

#: ../intro/index.md:129
msgid "We use GitHub issues for development related discussion. So you should use them only if your question or issue is tightly related to the development of the library."
msgstr ""

#: ../intro/index.md:132
msgid "Is my MCU/hardware supported?"
msgstr ""

#: ../intro/index.md:133
msgid "Every MCU which is capable of driving a display via Parallel port, SPI, RGB interface or anything else and fulfills the Requirements is supported by LLVGL."
msgstr ""

#: ../intro/index.md:135
msgid "It includes:"
msgstr ""

#: ../intro/index.md:136
msgid "\"Common\" MCUs like STM32F, STM32H, NXP Kinetis, LPC, iMX, dsPIC33, PIC32 etc."
msgstr ""

#: ../intro/index.md:137
msgid "Bluetooth, GSM, WiFi modules like Nordic NRF and Espressif ESP32"
msgstr ""

#: ../intro/index.md:138
msgid "Linux frame buffer like /dev/fb0 which includes Single-board computers too like Raspberry Pi"
msgstr ""

#: ../intro/index.md:139
msgid "And anything else with a strong enough MCU and a periphery to drive a display"
msgstr ""

#: ../intro/index.md:141
msgid "Is my display supported?"
msgstr ""

#: ../intro/index.md:142
msgid "LVGL needs just one simple driver function to copy an array of pixels into a given area of the display. If you can do this with your display then you can use that display with LVGL."
msgstr ""

#: ../intro/index.md:145
msgid "Some examples of the supported display types:"
msgstr ""

#: ../intro/index.md:146
msgid "TFTs with 16 or 24 bit color depth"
msgstr ""

#: ../intro/index.md:147
msgid "Monitors with HDMI port"
msgstr ""

#: ../intro/index.md:148
msgid "Small monochrome displays"
msgstr ""

#: ../intro/index.md:149
msgid "Gray-scale displays"
msgstr ""

#: ../intro/index.md:150
msgid "even LED matrices"
msgstr ""

#: ../intro/index.md:151
msgid "or any other display where you can control the color/state of the pixels"
msgstr ""

#: ../intro/index.md:153
msgid "See the Porting section to learn more."
msgstr ""

#: ../intro/index.md:155
msgid "Nothing happens, my display driver is not called. What have I missed?"
msgstr ""

#: ../intro/index.md:156
msgid "Be sure you are calling lv_tick_inc(x) in an interrupt and lv_task_handler() in your main while(1)."
msgstr ""

#: ../intro/index.md:158
msgid "Learn more in the Tick and Task handler section."
msgstr ""

#: ../intro/index.md:160
msgid "Why the display driver is called only once? Only the upper part of the display is refreshed."
msgstr ""

#: ../intro/index.md:161
msgid "Be sure you are calling lv_disp_flush_ready(drv) at the end of your \"display flush callback\"."
msgstr ""

#: ../intro/index.md:163
msgid "Why I see only garbage on the screen?"
msgstr ""

#: ../intro/index.md:164
msgid "Probably there a bug in your display driver. Try the following code without using LVGL. You should see a square with red-blue gradient"
msgstr ""

#: ../intro/index.md:189
msgid "Why I see non-sense colors on the screen?"
msgstr ""

#: ../intro/index.md:190
msgid "Probably LVGL's color format is not compatible with your displays color format. Check LV_COLOR_DEPTH in lv_conf.h."
msgstr ""

#: ../intro/index.md:192
msgid "If you are using 16 bit colors with SPI (or other byte-oriented interface) probably you need to set LV_COLOR_16_SWAP  1 in lv_conf.h. It swaps the upper and lower bytes of the pixels."
msgstr ""

#: ../intro/index.md:195
msgid "How to speed up my UI?"
msgstr ""

#: ../intro/index.md:196
msgid "Turn on compiler optimization and enable cache if your MCU has"
msgstr ""

#: ../intro/index.md:197
msgid "Increase the size of the display buffer"
msgstr ""

#: ../intro/index.md:198
msgid "Use 2 display buffers and flush the buffer with DMA (or similar periphery) in the background"
msgstr ""

#: ../intro/index.md:199
msgid "Increase the clock speed of the SPI or Parallel port if you use them to drive the display"
msgstr ""

#: ../intro/index.md:200
msgid "If your display has SPI port consider changing to a model with parallel because it has much higher throughput"
msgstr ""

#: ../intro/index.md:201
msgid "Keep the display buffer in the internal RAM (not in external SRAM) because LVGL uses it a lot and it should have a small access time"
msgstr ""

#: ../intro/index.md:203
msgid "How to reduce flash/ROM usage?"
msgstr ""

#: ../intro/index.md:204
msgid "You can disable all the unused features (such as animations, file system, GPU etc.) and object types in lv_conf.h."
msgstr ""

#: ../intro/index.md:206
msgid "If you are using GCC you can add"
msgstr ""

#: ../intro/index.md:207
msgid "-fdata-sections -ffunction-sections compiler flags"
msgstr ""

#: ../intro/index.md:208
msgid "--gc-sections linker flag"
msgstr ""

#: ../intro/index.md:210
msgid "to remove unused functions and variables from the final binary"
msgstr ""

#: ../intro/index.md:212
msgid "How to reduce the RAM usage"
msgstr ""

#: ../intro/index.md:213
msgid "Lower the size of the Display buffer"
msgstr ""

#: ../intro/index.md:214
msgid "Reduce LV_MEM_SIZE in lv_conf.h. This memory used when you create objects like buttons, labels, etc."
msgstr ""

#: ../intro/index.md:215
msgid "To work with lower LV_MEM_SIZE you can create the objects only when required and deleted them when they are not required anymore"
msgstr ""

#: ../intro/index.md:217
msgid "How to work with an operating system?"
msgstr ""

#: ../intro/index.md:219
msgid "To work with an operating system where tasks can interrupt each other (preemptive) you should protect LVGL related function calls with a mutex. See the Operating system and interrupts section to learn more."
msgstr ""
