# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, LVGL LLC
# This file is distributed under the same license as the LVGL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LVGL v7.0.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-04 10:11+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../get-started/arduino.md:1
msgid "Arduino"
msgstr ""

#: ../get-started/arduino.md:3 ../get-started/nxp.md:3
#: ../get-started/stm32.md:3
msgid "TODO"
msgstr ""

#: ../get-started/espressif.md:1
msgid "Espressif (ESP32)"
msgstr ""

#: ../get-started/index.md:5
msgid "Get started"
msgstr ""

#: ../get-started/index.md:7
msgid ""
"There are several ways to get your feet wet with LVGL. This list shows "
"the recommended way of learning the library:"
msgstr ""

#: ../get-started/index.md:8
msgid "Check the Online demos to see LVGL in action (3 minutes)"
msgstr ""

#: ../get-started/index.md:9
msgid "Read the Introduction page of the documentation (5 minutes)"
msgstr ""

#: ../get-started/index.md:10
msgid "Read the Quick overview page of the documentation (15 minutes)"
msgstr ""

#: ../get-started/index.md:11
msgid "Set up a Simulator (10 minutes)"
msgstr ""

#: ../get-started/index.md:12
msgid "Try out some Examples"
msgstr ""

#: ../get-started/index.md:13
msgid ""
"Port LVGL to a board. See the Porting guide or check the ready to use "
"Projects"
msgstr ""

#: ../get-started/index.md:14
msgid ""
"Read the Overview page to get a better understanding of the library. (2-3"
" hours)"
msgstr ""

#: ../get-started/index.md:15
msgid "Check the documentation of the Widgets to see their features and usage"
msgstr ""

#: ../get-started/index.md:16
msgid "If you have questions got to the Forum"
msgstr ""

#: ../get-started/index.md:17
msgid ""
"Read the Contributing guide to see how you can help to improve LVGL (15 "
"minutes)"
msgstr ""

#: ../get-started/micropython.md:5 ../get-started/quick-overview.md:205
msgid "Micropython"
msgstr ""

#: ../get-started/micropython.md:7
msgid "What is Micropython?"
msgstr ""

#: ../get-started/micropython.md:9
msgid ""
"Micropython is Python for microcontrollers.Using Micropython, you can "
"write Python3 code and run it even on a bare metal architecture with "
"limited resources."
msgstr ""

#: ../get-started/micropython.md:12
msgid "Highlights of Micropython"
msgstr ""

#: ../get-started/micropython.md:14
msgid ""
"Compact - Fits and runs within just 256k of code space and 16k of RAM. No"
" OS is needed, although you can also run it with an OS, if you want."
msgstr ""

#: ../get-started/micropython.md:15
msgid ""
"Compatible - Strives to be as compatible as possible with normal Python "
"(known as CPython)."
msgstr ""

#: ../get-started/micropython.md:16
msgid ""
"Versatile - Supports many architectures (x86, x86-64, ARM, ARM Thumb, "
"Xtensa)."
msgstr ""

#: ../get-started/micropython.md:17
msgid ""
"Interactive - No need for the compile-flash-boot cycle. With the REPL "
"(interactive prompt) you can type commands and execute them immediately, "
"run scripts etc."
msgstr ""

#: ../get-started/micropython.md:18
msgid ""
"Popular - Many platforms are supported. The user base is growing bigger. "
"Notable forks: MicroPython, CircuitPython, MicroPython_ESP32_psRAM_LoBo"
msgstr ""

#: ../get-started/micropython.md:19
msgid ""
"Embedded Oriented - Comes with modules specifically for embedded systems,"
" such as the machine module for accessing low-level hardware (I/O pins, "
"ADC, UART, SPI, I2C, RTC, Timers etc.)"
msgstr ""

#: ../get-started/micropython.md:23
msgid "Why Micropython + LVGL?"
msgstr ""

#: ../get-started/micropython.md:25
msgid ""
"Currently, Micropython does not have a good high-level GUI library by "
"default. LVGL is an Object Oriented Component Based high-level GUI "
"library, which seems to be a natural candidate to map into a higher level"
" language, such as Python. LVGL is implemented in C and its APIs are in "
"C."
msgstr ""

#: ../get-started/micropython.md:27
msgid "Here are some advantages of using LVGL in Micropython:"
msgstr ""

#: ../get-started/micropython.md:29
msgid ""
"Develop GUI in Python, a very popular high level language. Use paradigms "
"such as Object Oriented Programming."
msgstr ""

#: ../get-started/micropython.md:30
msgid ""
"Usually, GUI development requires multiple iterations to get things "
"right. With C, each iteration consists of Change code > Build > Flash > "
"Run.In Micropython it's just Change code > Run ! You can even run "
"commands interactively using the REPL (the interactive prompt)"
msgstr ""

#: ../get-started/micropython.md:33
msgid "Micropython + LVGL could be used for:"
msgstr ""

#: ../get-started/micropython.md:35
msgid "Fast prototyping GUI."
msgstr ""

#: ../get-started/micropython.md:36
msgid "Shorten the cycle of changing and fine-tuning the GUI."
msgstr ""

#: ../get-started/micropython.md:37
msgid ""
"Model the GUI in a more abstract way by defining reusable composite "
"objects, taking advantage of Python's language features such as "
"Inheritance, Closures, List Comprehension, Generators, Exception "
"Handling, Arbitrary Precision Integers and others."
msgstr ""

#: ../get-started/micropython.md:38
msgid ""
"Make LVGL accessible to a larger audience. No need to know C in order to "
"create a nice GUI on an embedded system.This goes well with CircuitPython"
" vision. CircuitPython was designed with education in mind, to make it "
"easier for new or unexperienced users to get started with embedded "
"development."
msgstr ""

#: ../get-started/micropython.md:40
msgid ""
"Creating tools to work with LVGL at a higher level (e.g. drag-and-drop "
"designer)."
msgstr ""

#: ../get-started/micropython.md:44
msgid "So what does it look like?"
msgstr ""

#: ../get-started/micropython.md:46
msgid ""
"TL;DR: It's very much like the C API, but Object Oriented for LVGL "
"components."
msgstr ""

#: ../get-started/micropython.md:49
msgid "Let's dive right into an example!"
msgstr ""

#: ../get-started/micropython.md:51
msgid "A simple example"
msgstr ""

#: ../get-started/micropython.md:64
msgid "How can I use it?"
msgstr ""

#: ../get-started/micropython.md:66
msgid "Online Simulator"
msgstr ""

#: ../get-started/micropython.md:68
msgid ""
"If you want to experiment with LVGL + Micropython without downloading "
"anything - you can use our online simulator!It's a fully functional LVGL "
"+ Micropython that runs entirely in the browser and allows you to edit a "
"python script and run it."
msgstr ""

#: ../get-started/micropython.md:71
msgid "Click here to experiment on the online simulator"
msgstr ""

#: ../get-started/micropython.md:73
msgid "Hello World"
msgstr ""

#: ../get-started/micropython.md:75
msgid "Note: examples don't work with v7 yet, so v6 is used."
msgstr ""

#: ../get-started/micropython.md:77
msgid "PC Simulator"
msgstr ""

#: ../get-started/micropython.md:79
msgid ""
"Micropython is ported to many platforms. One notable port is \"unix\", "
"which allows you to build and run Micropython (+LVGL) on a Linux machine."
" (On a Windows machine you might need Virtual Box or WSL or MinGW or "
"Cygwin etc.)"
msgstr ""

#: ../get-started/micropython.md:81
msgid ""
"Click here to know more information about building and running the unix "
"port"
msgstr ""

#: ../get-started/micropython.md:83
msgid "Embedded platform"
msgstr ""

#: ../get-started/micropython.md:85
msgid ""
"At the end, the goal is to run it all on an embedded platform.Both "
"Micropython and LVGL can be used on many embedded architectures, such as "
"stm32, ESP32 etc.You would also need display and input drivers. We have "
"some sample drivers (ESP32+ILI9341, as well as some other examples), but "
"most chances are you would want to create your own input/display drivers "
"for your specific purposes.Drivers can be implemented either in C as "
"Micropython module, or in pure Micropython!"
msgstr ""

#: ../get-started/micropython.md:90 ../get-started/nuttx.md:97
msgid "Where can I find more information?"
msgstr ""

#: ../get-started/micropython.md:92
msgid "On the Blog Post"
msgstr ""

#: ../get-started/micropython.md:93
msgid "On lv_micropython README"
msgstr ""

#: ../get-started/micropython.md:94
msgid "On lv_binding_micropython README"
msgstr ""

#: ../get-started/micropython.md:95
msgid "On LVGL forum (Feel free to ask anything!)"
msgstr ""

#: ../get-started/micropython.md:96
msgid "On Micropython docs and forum"
msgstr ""

#: ../get-started/nuttx.md:5
msgid "NuttX RTOS"
msgstr ""

#: ../get-started/nuttx.md:7
msgid "What is NuttX?"
msgstr ""

#: ../get-started/nuttx.md:9
msgid ""
"NuttX is a mature and secure real-time operating system (RTOS) with an "
"emphasis on technical standards compliance and small size. It is scalable"
" from 8-bit to 64-bit microcontroller and microprocessors. Complaint with"
" the Portable Operating System Interface (POSIX) and the American "
"National Standards Institute (ANSI) standards and with many Linux-like "
"subsystems. The best way to think about NuttX is thinking about a small "
"Unix/Linux for microcontrollers."
msgstr ""

#: ../get-started/nuttx.md:13
msgid "Highlights of NuttX"
msgstr ""

#: ../get-started/nuttx.md:15
msgid ""
"Small - Fits and runs within small microcontroller as small was 32KB "
"Flash and 8KB of RAM."
msgstr ""

#: ../get-started/nuttx.md:16
msgid "Compliant - Strives to be as compatible as possible with POSIX and Linux."
msgstr ""

#: ../get-started/nuttx.md:17
msgid ""
"Versatile - Supports many architectures (ARM, ARM Thumb, AVR, MIPS, "
"OpenRISC, RISC-V 32-bit and 64-bit, RX65N, x86-64, Xtensa, Z80/Z180, "
"etc)."
msgstr ""

#: ../get-started/nuttx.md:18
msgid ""
"Modular - Its modular design allow developers to select only what really "
"matters and use modules to include new features."
msgstr ""

#: ../get-started/nuttx.md:19
msgid ""
"Popular - NuttX is used by many companies around the world. Probably you "
"already used a product with NuttX without knowing it was running NuttX."
msgstr ""

#: ../get-started/nuttx.md:20
msgid ""
"Predictable - NuttX is a preemptible Realtime kernel, then you can use it"
" to create predictable applications for realtime control."
msgstr ""

#: ../get-started/nuttx.md:24
msgid "Why NuttX + LVGL?"
msgstr ""

#: ../get-started/nuttx.md:26
msgid ""
"Although NuttX has its own graphic library called NX, LVGL is a good "
"alternative because users could find more eyes-candy demos and reuse it "
"from previous projects. LVGL is an Object Oriented Component Based high-"
"level GUI library, that could fit very well for a RTOS with advanced "
"features like NuttX. LVGL is implemented in C and its APIs are in C."
msgstr ""

#: ../get-started/nuttx.md:30
msgid "Here are some advantages of using LVGL in NuttX"
msgstr ""

#: ../get-started/nuttx.md:32
msgid ""
"Develop GUI in Linux first and when it is done just compile it for NuttX,"
" nothing more, no wasting of time."
msgstr ""

#: ../get-started/nuttx.md:33
msgid ""
"Usually, GUI development for low level RTOS requires multiple iterations "
"to get things right. Where each iteration consists of Change code > Build"
" > Flash > Run. Using LVGL, Linux and NuttX you can reduce this process "
"and just test everything on your computer and when it is done, compile it"
" on NuttX and that is it."
msgstr ""

#: ../get-started/nuttx.md:36
msgid "NuttX + LVGL could be used for"
msgstr ""

#: ../get-started/nuttx.md:38
msgid "GUI demos to demonstrate your board graphics capacities."
msgstr ""

#: ../get-started/nuttx.md:39
msgid "Fast prototyping GUI for MVP (Minimum Viable Product) presentation."
msgstr ""

#: ../get-started/nuttx.md:40
msgid ""
"Easy way to visualize sensors data directly on the board without using a "
"computer."
msgstr ""

#: ../get-started/nuttx.md:41
msgid ""
"Final products GUI without touchscreen (i.e. 3D Printer Interface using "
"Rotary Encoder to Input data)."
msgstr ""

#: ../get-started/nuttx.md:42
msgid "Final products interface with touchscren (and bells and whistles)."
msgstr ""

#: ../get-started/nuttx.md:46
msgid "How to get started with NuttX and LVGL?"
msgstr ""

#: ../get-started/nuttx.md:48
msgid ""
"There are many boards in the NuttX mainline (https://github.com/apache"
"/incubator-nuttx) with support for LVGL. Let's to use the "
"STM32F429IDISCOVERY as example because it is a very popular board."
msgstr ""

#: ../get-started/nuttx.md:51
msgid "First you need to install the pre-requisite on your system"
msgstr ""

#: ../get-started/nuttx.md:53
msgid "Let's to use Linux and example, for Windows"
msgstr ""

#: ../get-started/nuttx.md:59
msgid "Now let's to create a workspace to save our files"
msgstr ""

#: ../get-started/nuttx.md:66
msgid "Clone the NuttX and Apps repositories:"
msgstr ""

#: ../get-started/nuttx.md:73
msgid "Configure NuttX to use the stm32f429i-disco board and the LVGL Demo"
msgstr ""

#: ../get-started/nuttx.md:80
msgid ""
"If everything went fine you should have now the file nuttx.bin to flash "
"on your board:"
msgstr ""

#: ../get-started/nuttx.md:87
msgid "Flashing the firmware in the board using OpenOCD:"
msgstr ""

#: ../get-started/nuttx.md:92
msgid "Reset the board and using the 'NSH>' terminal start the LVGL demo:"
msgstr ""

#: ../get-started/nuttx.md:99
msgid "On the LVGL on LPCXpresso54628"
msgstr ""

#: ../get-started/nuttx.md:100
msgid "NuttX mailing list Apache NuttX Mailing List"
msgstr ""

#: ../get-started/nxp.md:1
msgid "NXP"
msgstr ""

#: ../get-started/pc-simulator.md:5
msgid "Simulator on PC"
msgstr ""

#: ../get-started/pc-simulator.md:7
msgid ""
"You can try out the LVGL using only your PC (i.e. without any development"
" boards). The LVGL will run on a simulator environment on the PC where "
"anyone can write and experiment the real LVGL applications."
msgstr ""

#: ../get-started/pc-simulator.md:9
msgid "Simulator on the PC have the following advantages:"
msgstr ""

#: ../get-started/pc-simulator.md:10
msgid ""
"Hardware independent - Write a code, run it on the PC and see the result "
"on the PC monitor."
msgstr ""

#: ../get-started/pc-simulator.md:11
msgid "Cross-platform - Any Windows, Linux or OSX PC can run the PC simulator."
msgstr ""

#: ../get-started/pc-simulator.md:12
msgid ""
"Portability - the written code is portable, which means you can simply "
"copy it when using an embedded hardware."
msgstr ""

#: ../get-started/pc-simulator.md:13
msgid ""
"Easy Validation - The simulator is also very useful to report bugs "
"because it means common platform for every user. So it's a good idea to "
"reproduce a bug in simulator and use the code snippet in the Forum."
msgstr ""

#: ../get-started/pc-simulator.md:15
msgid "Select an IDE"
msgstr ""

#: ../get-started/pc-simulator.md:17
msgid ""
"The simulator is ported to various IDEs (Integrated Development "
"Environments). Choose your favorite IDE, read its README on GitHub, "
"download the project, and load it to the IDE."
msgstr ""

#: ../get-started/pc-simulator.md:51
msgid ""
"You can use any IDEs for the development but, for simplicity, the "
"configuration for Eclipse CDT is focused in this tutorial. The following "
"section describes the set-up guide of Eclipse CDT in more details."
msgstr ""

#: ../get-started/pc-simulator.md:54
msgid ""
"Note: If you are on Windows, it's usually better to use the Visual Studio"
" or CodeBlocks projects instead. They work out of the box without "
"requiring extra steps."
msgstr ""

#: ../get-started/pc-simulator.md:56
msgid "Set-up Eclipse CDT"
msgstr ""

#: ../get-started/pc-simulator.md:58
msgid "Install Eclipse CDT"
msgstr ""

#: ../get-started/pc-simulator.md:60
msgid "Eclipse CDT is a C/C++ IDE."
msgstr ""

#: ../get-started/pc-simulator.md:62
msgid ""
"Eclipse is a Java based software therefore be sure Java Runtime "
"Environment is installed on your system."
msgstr ""

#: ../get-started/pc-simulator.md:64
msgid "On Debian-based distros (e.g. Ubuntu): sudo apt-get install default-jre"
msgstr ""

#: ../get-started/pc-simulator.md:66
msgid ""
"Note: If you are using other distros, then please refer and install 'Java"
" Runtime Environment' suitable to your distro. Note: If you are using "
"macOS and get a \"Failed to create the Java Virtual Machine\" error, "
"uninstall any other Java JDK installs and install Java JDK 8u. This "
"should fix the problem."
msgstr ""

#: ../get-started/pc-simulator.md:69
msgid ""
"You can download Eclipse's CDT from: "
"https://www.eclipse.org/cdt/downloads.php. Start the installer and choose"
" Eclipse CDT from the list."
msgstr ""

#: ../get-started/pc-simulator.md:71
msgid "Install SDL 2"
msgstr ""

#: ../get-started/pc-simulator.md:73
msgid ""
"The PC simulator uses the SDL 2 cross platform library to simulate a TFT "
"display and a touch pad."
msgstr ""

#: ../get-started/pc-simulator.md:75
msgid "Linux"
msgstr ""

#: ../get-started/pc-simulator.md:76
msgid "On Linux you can easily install SDL2 using a terminal:"
msgstr ""

#: ../get-started/pc-simulator.md:78
msgid ""
"Find the current version of SDL2: apt-cache search libsdl2 (e.g. "
"libsdl2-2.0-0)"
msgstr ""

#: ../get-started/pc-simulator.md:79
msgid ""
"Install SDL2: sudo apt-get install libsdl2-2.0-0 (replace with the found "
"version)"
msgstr ""

#: ../get-started/pc-simulator.md:80
msgid "Install SDL2 development package: sudo apt-get install libsdl2-dev"
msgstr ""

#: ../get-started/pc-simulator.md:81
msgid ""
"If build essentials are not installed yet: sudo apt-get install build-"
"essential"
msgstr ""

#: ../get-started/pc-simulator.md:83
msgid "Windows"
msgstr ""

#: ../get-started/pc-simulator.md:84
msgid ""
"If you are using Windows firstly you need to install MinGW (64 bit "
"version). After installing MinGW, do the following steps to add SDL2:"
msgstr ""

#: ../get-started/pc-simulator.md:86
msgid ""
"Download the development libraries of SDL.Go to "
"https://www.libsdl.org/download-2.0.php and download Development "
"Libraries: SDL2-devel-2.0.5-mingw.tar.gz"
msgstr ""

#: ../get-started/pc-simulator.md:88
msgid ""
"Decompress the file and go to x86_64-w64-mingw32 directory (for 64 bit "
"MinGW) or to i686-w64-mingw32 (for 32 bit MinGW)"
msgstr ""

#: ../get-started/pc-simulator.md:89
msgid ""
"Copy _...mingw32/include/SDL2 folder to "
"C:/MinGW/.../x86_64-w64-mingw32/include"
msgstr ""

#: ../get-started/pc-simulator.md:90
msgid "Copy _...mingw32/lib/ content to C:/MinGW/.../x86_64-w64-mingw32/lib"
msgstr ""

#: ../get-started/pc-simulator.md:91
msgid ""
"Copy _...mingw32/bin/SDL2.dll to {eclipse_worksapce}/pc_simulator/Debug/."
"  Do it later when Eclipse is installed."
msgstr ""

#: ../get-started/pc-simulator.md:93
msgid ""
"Note: If you are using Microsoft Visual Studio instead of Eclipse then "
"you don't have to install MinGW."
msgstr ""

#: ../get-started/pc-simulator.md:95
msgid "OSX"
msgstr ""

#: ../get-started/pc-simulator.md:96
msgid "On OSX you can easily install SDL2 with brew: brew install sdl2"
msgstr ""

#: ../get-started/pc-simulator.md:98
msgid ""
"If something is not working, then please refer this tutorial to get "
"started with SDL."
msgstr ""

#: ../get-started/pc-simulator.md:100
msgid "Pre-configured project"
msgstr ""

#: ../get-started/pc-simulator.md:102
msgid ""
"A pre-configured graphics library project (based on the latest release) "
"is always available to get started easily. You can find the latest one on"
" GitHub. (Please note that, the project is configured for Eclipse CDT)."
msgstr ""

#: ../get-started/pc-simulator.md:106
msgid "Add the pre-configured project to Eclipse CDT"
msgstr ""

#: ../get-started/pc-simulator.md:108
msgid ""
"Run Eclipse CDT. It will show a dialogue about the workspace path. Before"
" accepting the path, check that path and copy (and unzip) the downloaded "
"pre-configured project there. After that, you can accept the workspace "
"path. Of course you can modify this path but, in that case copy the "
"project to the corresponding location."
msgstr ""

#: ../get-started/pc-simulator.md:110
msgid ""
"Close the start up window and go to File->Import and choose "
"General->Existing project into Workspace. Browse the root directory of "
"the project and click Finish"
msgstr ""

#: ../get-started/pc-simulator.md:112
msgid "On Windows you have to do two additional things:"
msgstr ""

#: ../get-started/pc-simulator.md:114
msgid "Copy the SDL2.dll into the project's Debug folder"
msgstr ""

#: ../get-started/pc-simulator.md:115
msgid ""
"Right click on the project -> Project properties -> C/C++ Build -> "
"Settings -> Libraries -> Add ... and add mingw32 above SDLmain and SDL. "
"(The order is important: mingw32, SDLmain, SDL)"
msgstr ""

#: ../get-started/pc-simulator.md:117
msgid "Compile and Run"
msgstr ""

#: ../get-started/pc-simulator.md:119
msgid ""
"Now you are ready to run the LVGL Graphics Library on your PC. Click on "
"the Hammer Icon on the top menu bar to Build the project. If you have "
"done everything right, then you will not get any errors. Note that on "
"some systems additional steps might be required to \"see\" SDL 2 from "
"Eclipse but, in most of cases the configurations in the downloaded "
"project is enough."
msgstr ""

#: ../get-started/pc-simulator.md:121
msgid ""
"After a success build, click on the Play button on the top menu bar to "
"run the project. Now a window should appear in the middle of your screen."
msgstr ""

#: ../get-started/pc-simulator.md:123
msgid ""
"Now everything is ready to use the LVGL in the practice or begin the "
"development on your PC."
msgstr ""

#: ../get-started/quick-overview.md:6
msgid "Quick overview"
msgstr ""

#: ../get-started/quick-overview.md:8
msgid ""
"Here you can learn the most important things about LVGL. You should read "
"it first to get a general impression and read the detailed Porting and "
"Overview sections after that."
msgstr ""

#: ../get-started/quick-overview.md:11
msgid "Get started in a simulator"
msgstr ""

#: ../get-started/quick-overview.md:13
msgid ""
"Instead of porting LVGL to an embedded hardware, it's highly recommended "
"to get started in a simulator first."
msgstr ""

#: ../get-started/quick-overview.md:15
msgid ""
"LVGL is ported to many IDEs to be sure you will find your faviourite one."
" Go to Simulators to get ready-to-use projects which can be run on your "
"PC. This way you can save the porting for now and make some experience "
"with LVGL immediately."
msgstr ""

#: ../get-started/quick-overview.md:17
msgid "Add LVGL into your project"
msgstr ""

#: ../get-started/quick-overview.md:19
msgid ""
"The following steps show how to setup LVGL on an embedded system with a "
"display and a touchpad."
msgstr ""

#: ../get-started/quick-overview.md:21
msgid ""
"Download or Clone the library from GitHub with git clone "
"https://github.com/lvgl/lvgl.git"
msgstr ""

#: ../get-started/quick-overview.md:22
msgid "Copy the lvgl folder into your project"
msgstr ""

#: ../get-started/quick-overview.md:23
msgid ""
"Copy lvgl/lv_conf_templ.h as lv_conf.h next to the lvgl folder, change "
"the first #if 0 to 1 to enable the file's content and set at least "
"LV_HOR_RES_MAX, LV_VER_RES_MAX and LV_COLOR_DEPTH defines."
msgstr ""

#: ../get-started/quick-overview.md:24
msgid "Include lvgl/lvgl.h where you need to use LVGL related functions."
msgstr ""

#: ../get-started/quick-overview.md:25
msgid ""
"Call lv_tick_inc(x) every x milliseconds in a Timer or Task (x should be "
"between 1 and 10). It is required for the internal timing of LVGL."
msgstr ""

#: ../get-started/quick-overview.md:26
msgid "Call lv_init()"
msgstr ""

#: ../get-started/quick-overview.md:27
msgid ""
"Create a display buffer for LVGL. LVGL will render the graphics here "
"first, and seed the rendered image to the display. The buffer size can be"
" set freely but 1/10 screen size is a good starting point."
msgstr ""

#: ../get-started/quick-overview.md:33
msgid ""
"Implement and register a function which can copy the rendered image to an"
" area of your display:"
msgstr ""

#: ../get-started/quick-overview.md:55
msgid ""
"Implement and register a function which can read an input device. E.g. "
"for a touch pad:"
msgstr ""

#: ../get-started/quick-overview.md:71
msgid ""
"Call lv_task_handler() periodically every few milliseconds in the main "
"while(1) loop, in Timer interrupt or in an Operation system task. It will"
" redraw the screen if required, handle input devices etc."
msgstr ""

#: ../get-started/quick-overview.md:74
msgid "For a more detailed guide go to the Porting section."
msgstr ""

#: ../get-started/quick-overview.md:76
msgid "Learn the basics"
msgstr ""

#: ../get-started/quick-overview.md:78
msgid "Widgets"
msgstr ""

#: ../get-started/quick-overview.md:80
msgid ""
"The graphical elements like Buttons, Labels, Sliders, Charts etc are "
"called objects or widgets in LVGL. Go to Widgets to see the full list of "
"available widgets."
msgstr ""

#: ../get-started/quick-overview.md:82
msgid ""
"Every object has a parent object where it is create. For example if a "
"label is created on a button, the button is the parent of label. The "
"child object moves with the parent and if the parent is deleted the "
"children will be deleted too."
msgstr ""

#: ../get-started/quick-overview.md:85
msgid ""
"Children can be visible only on their parent. It other words, the parts "
"of the children out of the parent are clipped."
msgstr ""

#: ../get-started/quick-overview.md:87
msgid ""
"A screen is the \"root\" parent. You can have any number of screens. To "
"get the current screen call lv_scr_act(), and to load a screen use "
"lv_scr_load(scr1)."
msgstr ""

#: ../get-started/quick-overview.md:89
msgid ""
"You can create a new object with lv_<type>_create(parent, obj_to_copy). "
"It will return an lv_obj_t * variable which should be used as a reference"
" to the object to set its parameters. The first parameter is the desired "
"parent, the second parameters can be an object to copy (NULL if unused). "
"For example:"
msgstr ""

#: ../get-started/quick-overview.md:96
msgid ""
"To set some basic attribute lv_obj_set_<paramters_name>(obj, <value>) "
"function can be used. For example:"
msgstr ""

#: ../get-started/quick-overview.md:103
msgid ""
"The objects has type specific parameters too which can be set by "
"lv_<type>_set_<paramters_name>(obj, <value>) functions. For example:"
msgstr ""

#: ../get-started/quick-overview.md:108
msgid ""
"To see the full API visit the documentation of the widgets or the related"
" header file (e.g. lvgl/src/lv_widgets/lv_slider.h)."
msgstr ""

#: ../get-started/quick-overview.md:110
msgid "Events"
msgstr ""

#: ../get-started/quick-overview.md:111
msgid ""
"Events are used to inform the user if something has happened with an "
"object. You can assign a callback to an object which will be called if "
"the object is clicked, released, dragged, being deleted etc. It should "
"look like this:"
msgstr ""

#: ../get-started/quick-overview.md:126
msgid "Learn more about the events in the Event overview section."
msgstr ""

#: ../get-started/quick-overview.md:128
msgid "Parts"
msgstr ""

#: ../get-started/quick-overview.md:129
msgid ""
"Widgets might be built from one or more parts. For example a button has "
"only one part called LV_BTN_PART_MAIN. However, a Page has "
"LV_PAGE_PART_BG, LV_PAGE_PART_SCROLLABLE, LV_PAGE_PART_SCROLLBAR and "
"LV_PAGE_PART_EDGE_FLASG."
msgstr ""

#: ../get-started/quick-overview.md:132
msgid ""
"Some parts are virtual (they are not real object, just drawn on the fly, "
"such as the scrollbar of a page) but other parts are real (they are real "
"object, such as the scrollable part of the page)."
msgstr ""

#: ../get-started/quick-overview.md:134
msgid ""
"Parts come into play when you want to set the styles and states of a "
"given part of an object. (See below)"
msgstr ""

#: ../get-started/quick-overview.md:136
msgid "States"
msgstr ""

#: ../get-started/quick-overview.md:137
msgid "The objects can be in a combination of the following states:"
msgstr ""

#: ../get-started/quick-overview.md:138
msgid "LV_STATE_DEFAULT Normal, released"
msgstr ""

#: ../get-started/quick-overview.md:139
msgid "LV_STATE_CHECKED Toggled or checked"
msgstr ""

#: ../get-started/quick-overview.md:140
msgid ""
"LV_STATE_FOCUSED Focused via keypad or encoder or clicked via "
"touchpad/mouse"
msgstr ""

#: ../get-started/quick-overview.md:141
msgid "LV_STATE_EDITED Edit by an encoder"
msgstr ""

#: ../get-started/quick-overview.md:142
msgid "LV_STATE_HOVERED Hovered by mouse (not supported now)"
msgstr ""

#: ../get-started/quick-overview.md:143
msgid "LV_STATE_PRESSED Pressed"
msgstr ""

#: ../get-started/quick-overview.md:144
msgid "LV_STATE_DISABLED Disabled or inactive"
msgstr ""

#: ../get-started/quick-overview.md:146
msgid ""
"For example if you press an object is automatically get the "
"LV_STATE_PRESSED state and when you release is it will be removed."
msgstr ""

#: ../get-started/quick-overview.md:148
msgid ""
"To get the current state use lv_obj_get_state(obj, part). It will return "
"the ORed states. For example it's a valid state for a checkbox: "
"LV_STATE_CHECKED | LV_STATE_PRESSED | LV_STATE_FOCUSED"
msgstr ""

#: ../get-started/quick-overview.md:151
msgid "Styles"
msgstr ""

#: ../get-started/quick-overview.md:152
msgid ""
"Styles can be assigned to the parts objects to changed their appearance. "
"A style can describe for example the background color, border width, text"
" font and so on. See the full list here."
msgstr ""

#: ../get-started/quick-overview.md:155
msgid ""
"The styles can be cascaded (similarly to CSS). It means you can add more "
"styles to a part of an object. For example style_btn can set a default "
"button appearance, and style_btn_red can overwrite some properties to "
"make the button red-"
msgstr ""

#: ../get-started/quick-overview.md:158
msgid ""
"Every style property you set is specific to a state. For example is you "
"can set different background color for LV_STATE_DEFAULT and "
"LV_STATE_PRESSED. The library finds the best match between the state of "
"the given part and the available style properties. For example if the "
"object is in pressed state and the border width is specified for pressed "
"state, then it will be used. However, if it's not specified for pressed "
"state, the LV_STATE_DEFAULT's border width will be used. If the border "
"width not defined for LV_STATE_DEFAULT either, a default value will be "
"used."
msgstr ""

#: ../get-started/quick-overview.md:162
msgid ""
"Some properties (typically the text-related ones) can be inherited. It "
"means if a property is not set in an object it will be searched in its "
"parents too. For example you can set the font once in the screen's style "
"and every text will inherit it by default."
msgstr ""

#: ../get-started/quick-overview.md:165
msgid "Local style properties also can be added to the objects."
msgstr ""

#: ../get-started/quick-overview.md:167
msgid "Themes"
msgstr ""

#: ../get-started/quick-overview.md:168
msgid ""
"Themes are the default styles of the objects. The styles from the themes "
"are applied automatically when the objects are created."
msgstr ""

#: ../get-started/quick-overview.md:171
msgid "You can select the theme to use in lv_conf.h."
msgstr ""

#: ../get-started/quick-overview.md:173
msgid "Examples"
msgstr ""

#: ../get-started/quick-overview.md:175
msgid "Button with label"
msgstr ""

#: ../get-started/quick-overview.md:185
msgid "Styling buttons"
msgstr ""

#: ../get-started/quick-overview.md:195
msgid "Slider and alignment"
msgstr ""

#: ../get-started/quick-overview.md:206
msgid "Learn more about Micropython."
msgstr ""

#: ../get-started/stm32.md:1
msgid "STM32"
msgstr ""

#~ msgid ""
#~ "Every style property you set is "
#~ "specific to a state. For example "
#~ "is you can set different background "
#~ "color for LV_STATE_DEFAULT and "
#~ "LV_STATE_PRESSED. The library finds the "
#~ "best match between the state of "
#~ "the given part and the available "
#~ "style properties. For example if the "
#~ "object is in pressed state and the"
#~ " border width is specified for "
#~ "pressed state, then it will be "
#~ "used. However, if it's nt specified "
#~ "for pressed state, the LV_STATE_DEFAULT's "
#~ "border width will be used. If the"
#~ " border width not defined for "
#~ "LV_STATE_DEFAULT either, a default value "
#~ "will be used."
#~ msgstr ""

