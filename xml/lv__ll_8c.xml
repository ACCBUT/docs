<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lv__ll_8c" kind="file" language="C++">
    <compoundname>lv_ll.c</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="lv__ll_8h" local="yes">lv_ll.h</includes>
    <includes refid="lv__mem_8h" local="yes">lv_mem.h</includes>
    <incdepgraph>
      <node id="2922">
        <label>stdbool.h</label>
      </node>
      <node id="2915">
        <label>stdint.h</label>
      </node>
      <node id="2914">
        <label>/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c</label>
        <link refid="lv__ll_8c"/>
        <childnode refid="2915" relation="include">
        </childnode>
        <childnode refid="2916" relation="include">
        </childnode>
        <childnode refid="2917" relation="include">
        </childnode>
        <childnode refid="2918" relation="include">
        </childnode>
      </node>
      <node id="2917">
        <label>lv_ll.h</label>
        <link refid="lv__ll_8h"/>
        <childnode refid="2918" relation="include">
        </childnode>
        <childnode refid="2915" relation="include">
        </childnode>
        <childnode refid="2920" relation="include">
        </childnode>
        <childnode refid="2922" relation="include">
        </childnode>
      </node>
      <node id="2920">
        <label>stddef.h</label>
      </node>
      <node id="2919">
        <label>../../../lv_conf.h</label>
      </node>
      <node id="2916">
        <label>string.h</label>
      </node>
      <node id="2921">
        <label>lv_log.h</label>
        <link refid="lv__log_8h"/>
        <childnode refid="2919" relation="include">
        </childnode>
        <childnode refid="2915" relation="include">
        </childnode>
      </node>
      <node id="2918">
        <label>lv_mem.h</label>
        <link refid="lv__mem_8h"/>
        <childnode refid="2919" relation="include">
        </childnode>
        <childnode refid="2915" relation="include">
        </childnode>
        <childnode refid="2920" relation="include">
        </childnode>
        <childnode refid="2921" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="lv__ll_8c_1a5e854f4fd8dd9a3c3c694b2e7f50a550" prot="public" static="no">
        <name>LL_NODE_META_SIZE</name>
        <initializer>(sizeof(<ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref> *) + sizeof(<ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref> *))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="19" column="9" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lv__ll_8c_1a7162ee79621282dc279ef8a8baef18a2" prot="public" static="no">
        <name>LL_PREV_P_OFFSET</name>
        <param><defname>ll_p</defname></param>
        <initializer>(ll_p-&gt;n_size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="20" column="9" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lv__ll_8c_1ac697b8b6519b655bc091216853afa66d" prot="public" static="no">
        <name>LL_NEXT_P_OFFSET</name>
        <param><defname>ll_p</defname></param>
        <initializer>(ll_p-&gt;n_size + sizeof(<ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref> *))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="21" column="9" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lv__ll_8c_1afb52add9e8848af63e27eadd374cecd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void node_set_prev</definition>
        <argsstring>(lv_ll_t *ll_p, lv_ll_node_t *act, lv_ll_node_t *prev)</argsstring>
        <name>node_set_prev</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref> *</type>
          <declname>act</declname>
        </param>
        <param>
          <type><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref> *</type>
          <declname>prev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the &apos;pervious node pointer&apos; of a node <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a node which prev. node pointer should be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a node which should be the previous node before &apos;act&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="30" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="404" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a7a4babbe02dec8e128da3d1e0d9e8d67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void node_set_next</definition>
        <argsstring>(lv_ll_t *ll_p, lv_ll_node_t *act, lv_ll_node_t *next)</argsstring>
        <name>node_set_next</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref> *</type>
          <declname>act</declname>
        </param>
        <param>
          <type><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref> *</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the &apos;next node pointer&apos; of a node <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a node which next node pointer should be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a node which should be the next node before &apos;act&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="31" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="421" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a3d1489794c2209fc7f6c0fb8a8e15de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_ll_init</definition>
        <argsstring>(lv_ll_t *ll_p, uint32_t node_size)</argsstring>
        <name>lv_ll_init</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>node_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_dsc</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to ll_dsc variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of 1 node in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="50" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="50" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a6a15a5ed0b0964a24fbc4aca413b56a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_ll_ins_head</definition>
        <argsstring>(lv_ll_t *ll_p)</argsstring>
        <name>lv_ll_ins_head</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new head to a linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new head </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="76" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="76" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a50f2f5a81449a36a9d56127cbdbc3e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_ll_ins_prev</definition>
        <argsstring>(lv_ll_t *ll_p, void *n_act)</argsstring>
        <name>lv_ll_ins_prev</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>n_act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a new node in front of the n_act node <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer a node </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new head </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="105" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="105" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1ade6869c78a7c94616603c4c2ce1329d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_ll_ins_tail</definition>
        <argsstring>(lv_ll_t *ll_p)</argsstring>
        <name>lv_ll_ins_tail</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new tail to a linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new tail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="134" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="134" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a0ba26667008c1560823e3410f9885d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_ll_rem</definition>
        <argsstring>(lv_ll_t *ll_p, void *node_p)</argsstring>
        <name>lv_ll_rem</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>node_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the node &apos;node_p&apos; from &apos;ll_p&apos; linked list. It does not free the the memory of node. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the linked list of &apos;node_p&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to node in &apos;ll_p&apos; linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="163" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="163" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1ade7eec2469b2c7d4487dacc33cbb1b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_ll_clear</definition>
        <argsstring>(lv_ll_t *ll_p)</argsstring>
        <name>lv_ll_clear</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove and free all elements from a linked list. The list remain valid but become empty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="194" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="194" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1acf45161f454ce27389d774b677576b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_ll_chg_list</definition>
        <argsstring>(lv_ll_t *ll_ori_p, lv_ll_t *ll_new_p, void *node, bool head)</argsstring>
        <name>lv_ll_chg_list</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_ori_p</declname>
        </param>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_new_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move a node to a new linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_ori_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the original (old) linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ll_new_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the new linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>true: be the head in the new list false be the head in the new list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="220" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="220" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1aa5f4c88fb30d4ca40cf134362049adc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_ll_get_head</definition>
        <argsstring>(const lv_ll_t *ll_p)</argsstring>
        <name>lv_ll_get_head</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return with head node of the linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the head of &apos;ll_p&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="258" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="258" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a273405ac29ee068ffd53cf92b1b3b064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_ll_get_tail</definition>
        <argsstring>(const lv_ll_t *ll_p)</argsstring>
        <name>lv_ll_get_tail</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return with tail node of the linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the head of &apos;ll_p&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="274" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="274" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a98ae2188079b1aa00eec3b9a24974899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_ll_get_next</definition>
        <argsstring>(const lv_ll_t *ll_p, const void *n_act)</argsstring>
        <name>lv_ll_get_next</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>n_act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return with the pointer of the next node after &apos;n_act&apos; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer a node </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the next node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="291" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="291" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1af150c35364287d518190c043512cc926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lv_ll_get_prev</definition>
        <argsstring>(const lv_ll_t *ll_p, const void *n_act)</argsstring>
        <name>lv_ll_get_prev</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>n_act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return with the pointer of the previous node after &apos;n_act&apos; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer a node </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the previous node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="309" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="309" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a82019febbea0b40eb06b5358361c4793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t lv_ll_get_len</definition>
        <argsstring>(const lv_ll_t *ll_p)</argsstring>
        <name>lv_ll_get_len</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the length of the linked list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the linked list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="326" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="326" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a3e284235a8901ae95e864fef6553c441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_ll_swap</definition>
        <argsstring>(lv_ll_t *ll_p, void *n1_p, void *n2_p)</argsstring>
        <name>lv_ll_swap</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>n1_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>n2_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="338" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="338" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1ab059354e6df6d0c11c72f88532dbe49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_ll_move_before</definition>
        <argsstring>(lv_ll_t *ll_p, void *n_act, void *n_after)</argsstring>
        <name>lv_ll_move_before</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>n_act</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>n_after</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move a nodw before an other node in the same linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to node to move </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_after</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a node which should be after <computeroutput>n_act</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="352" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="352" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8c_1a00c1406ac06d69ae8c057ac2a804a21b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lv_ll_is_empty</definition>
        <argsstring>(lv_ll_t *ll_p)</argsstring>
        <name>lv_ll_is_empty</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a linked list is empty <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: the linked list is empty; false: not empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" line="385" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c" bodystart="385" bodyend="392"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Handle linked lists. The nodes are dynamically allocated by the &apos;lv_mem&apos; module,</para><para>Handle linked lists. The nodes are dynamically allocated by the &apos;lv_mem&apos; module. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>INCLUDES</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv__ll_8h" kindref="compound">lv_ll.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv__mem_8h" kindref="compound">lv_mem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>DEFINES</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LL_NODE_META_SIZE<sp/>(sizeof(lv_ll_node_t<sp/>*)<sp/>+<sp/>sizeof(lv_ll_node_t<sp/>*))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LL_PREV_P_OFFSET(ll_p)<sp/>(ll_p-&gt;n_size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LL_NEXT_P_OFFSET(ll_p)<sp/>(ll_p-&gt;n_size<sp/>+<sp/>sizeof(lv_ll_node_t<sp/>*))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>TYPEDEFS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/>STATIC<sp/>PROTOTYPES</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>node_set_prev(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>act,<sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>prev);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>node_set_next(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>act,<sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>next);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>STATIC<sp/>VARIABLES</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>MACROS</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GLOBAL<sp/>FUNCTIONS</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8c_1a3d1489794c2209fc7f6c0fb8a8e15de9" kindref="member">lv_ll_init</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/>uint32_t<sp/>node_size)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LV_MEM_ENV64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Round<sp/>the<sp/>size<sp/>up<sp/>to<sp/>8*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(node_size<sp/>&amp;<sp/>0x7)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_size<sp/>=<sp/>node_size<sp/>&amp;<sp/>(~0x7);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_size<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Round<sp/>the<sp/>size<sp/>up<sp/>to<sp/>4*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(node_size<sp/>&amp;<sp/>0x3)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_size<sp/>=<sp/>node_size<sp/>&amp;<sp/>(~0x3);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_size<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a8dbe5afd50ad7e26e8035330f811cb57" kindref="member">n_size</ref><sp/>=<sp/>node_size;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__ll_8c_1a6a15a5ed0b0964a24fbc4aca413b56a1" kindref="member">lv_ll_ins_head</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>n_new;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>n_new<sp/>=<sp/><ref refid="lv__mem_8c_1a8b07007b17d5a3704eb34d225afe784c" kindref="member">lv_mem_alloc</ref>(ll_p-&gt;<ref refid="structlv__ll__t_1a8dbe5afd50ad7e26e8035330f811cb57" kindref="member">n_size</ref><sp/>+<sp/><ref refid="lv__ll_8c_1a5e854f4fd8dd9a3c3c694b2e7f50a550" kindref="member">LL_NODE_META_SIZE</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_new<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>n_new,<sp/>NULL);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*No<sp/>prev.<sp/>before<sp/>the<sp/>new<sp/>head*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>n_new,<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref>);<sp/></highlight><highlight class="comment">/*After<sp/>new<sp/>comes<sp/>the<sp/>old<sp/>head*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>old<sp/>head<sp/>then<sp/>before<sp/>it<sp/>goes<sp/>the<sp/>new*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref>,<sp/>n_new);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>=<sp/>n_new;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Set<sp/>the<sp/>new<sp/>head<sp/>in<sp/>the<sp/>dsc.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>no<sp/>tail<sp/>(1.<sp/>node)<sp/>set<sp/>the<sp/>tail<sp/>too*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>=<sp/>n_new;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_new;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__ll_8c_1a50f2f5a81449a36a9d56127cbdbc3e90" kindref="member">lv_ll_ins_prev</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_act)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>n_new;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>n_prev;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>ll_p<sp/>||<sp/>NULL<sp/>==<sp/>n_act)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="lv__ll_8c_1aa5f4c88fb30d4ca40cf134362049adc6" kindref="member">lv_ll_get_head</ref>(ll_p)<sp/>==<sp/>n_act)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_new<sp/>=<sp/><ref refid="lv__ll_8c_1a6a15a5ed0b0964a24fbc4aca413b56a1" kindref="member">lv_ll_ins_head</ref>(ll_p);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_new<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_new<sp/>=<sp/><ref refid="lv__mem_8c_1a8b07007b17d5a3704eb34d225afe784c" kindref="member">lv_mem_alloc</ref>(ll_p-&gt;<ref refid="structlv__ll__t_1a8dbe5afd50ad7e26e8035330f811cb57" kindref="member">n_size</ref><sp/>+<sp/><ref refid="lv__ll_8c_1a5e854f4fd8dd9a3c3c694b2e7f50a550" kindref="member">LL_NODE_META_SIZE</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_new<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_prev<sp/>=<sp/><ref refid="lv__ll_8c_1af150c35364287d518190c043512cc926" kindref="member">lv_ll_get_prev</ref>(ll_p,<sp/>n_act);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>n_prev,<sp/>n_new);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>n_new,<sp/>n_prev);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>n_act,<sp/>n_new);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>n_new,<sp/>n_act);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_new;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__ll_8c_1ade6869c78a7c94616603c4c2ce1329d3" kindref="member">lv_ll_ins_tail</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>n_new;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>n_new<sp/>=<sp/><ref refid="lv__mem_8c_1a8b07007b17d5a3704eb34d225afe784c" kindref="member">lv_mem_alloc</ref>(ll_p-&gt;<ref refid="structlv__ll__t_1a8dbe5afd50ad7e26e8035330f811cb57" kindref="member">n_size</ref><sp/>+<sp/><ref refid="lv__ll_8c_1a5e854f4fd8dd9a3c3c694b2e7f50a550" kindref="member">LL_NODE_META_SIZE</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_new<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_new<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>n_new,<sp/>NULL);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*No<sp/>next<sp/>after<sp/>the<sp/>new<sp/>tail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>n_new,<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref>);<sp/></highlight><highlight class="comment">/*The<sp/>prev.<sp/>before<sp/>new<sp/>is<sp/>tho<sp/>old<sp/>tail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>!=<sp/>NULL)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>old<sp/>tail<sp/>then<sp/>the<sp/>new<sp/>comes<sp/>after<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref>,<sp/>n_new);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>=<sp/>n_new;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Set<sp/>the<sp/>new<sp/>tail<sp/>in<sp/>the<sp/>dsc.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>no<sp/>head<sp/>(1.<sp/>node)<sp/>set<sp/>the<sp/>head<sp/>too*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>=<sp/>n_new;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_new;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8c_1a0ba26667008c1560823e3410f9885d9a" kindref="member">lv_ll_rem</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>node_p)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="lv__ll_8c_1aa5f4c88fb30d4ca40cf134362049adc6" kindref="member">lv_ll_get_head</ref>(ll_p)<sp/>==<sp/>node_p)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*The<sp/>new<sp/>head<sp/>will<sp/>be<sp/>the<sp/>node<sp/>after<sp/>&apos;n_act&apos;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>=<sp/><ref refid="lv__ll_8c_1a98ae2188079b1aa00eec3b9a24974899" kindref="member">lv_ll_get_next</ref>(ll_p,<sp/>node_p);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="lv__ll_8c_1a273405ac29ee068ffd53cf92b1b3b064" kindref="member">lv_ll_get_tail</ref>(ll_p)<sp/>==<sp/>node_p)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*The<sp/>new<sp/>tail<sp/>will<sp/>be<sp/>the<sp/><sp/>node<sp/>before<sp/>&apos;n_act&apos;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>=<sp/><ref refid="lv__ll_8c_1af150c35364287d518190c043512cc926" kindref="member">lv_ll_get_prev</ref>(ll_p,<sp/>node_p);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>n_prev<sp/>=<sp/><ref refid="lv__ll_8c_1af150c35364287d518190c043512cc926" kindref="member">lv_ll_get_prev</ref>(ll_p,<sp/>node_p);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>n_next<sp/>=<sp/><ref refid="lv__ll_8c_1a98ae2188079b1aa00eec3b9a24974899" kindref="member">lv_ll_get_next</ref>(ll_p,<sp/>node_p);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>n_prev,<sp/>n_next);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>n_next,<sp/>n_prev);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8c_1ade7eec2469b2c7d4487dacc33cbb1b32" kindref="member">lv_ll_clear</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>i_next;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="lv__ll_8c_1aa5f4c88fb30d4ca40cf134362049adc6" kindref="member">lv_ll_get_head</ref>(ll_p);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>i_next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i_next<sp/>=<sp/><ref refid="lv__ll_8c_1a98ae2188079b1aa00eec3b9a24974899" kindref="member">lv_ll_get_next</ref>(ll_p,<sp/>i);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__ll_8c_1a0ba26667008c1560823e3410f9885d9a" kindref="member">lv_ll_rem</ref>(ll_p,<sp/>i);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__mem_8c_1a4261e9d9b586a46a528a138d4c82b0ec" kindref="member">lv_mem_free</ref>(i);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>i_next;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8c_1acf45161f454ce27389d774b677576b27" kindref="member">lv_ll_chg_list</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_ori_p,<sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_new_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>node,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>head)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__ll_8c_1a0ba26667008c1560823e3410f9885d9a" kindref="member">lv_ll_rem</ref>(ll_ori_p,<sp/>node);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(head)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Set<sp/>node<sp/>as<sp/>head*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_new_p,<sp/>node,<sp/>NULL);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_new_p,<sp/>node,<sp/>ll_new_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_new_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>old<sp/>head<sp/>then<sp/>before<sp/>it<sp/>goes<sp/>the<sp/>new*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_new_p,<sp/>ll_new_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_new_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>=<sp/>node;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Set<sp/>the<sp/>new<sp/>head<sp/>in<sp/>the<sp/>dsc.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_new_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>no<sp/>tail<sp/>(first<sp/>node)<sp/>set<sp/>the<sp/>tail<sp/>too*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_new_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Set<sp/>node<sp/>as<sp/>tail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_prev(ll_new_p,<sp/>node,<sp/>ll_new_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_new_p,<sp/>node,<sp/>NULL);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_new_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>old<sp/>tail<sp/>then<sp/>after<sp/>it<sp/>goes<sp/>the<sp/>new*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_set_next(ll_new_p,<sp/>ll_new_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_new_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>=<sp/>node;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Set<sp/>the<sp/>new<sp/>tail<sp/>in<sp/>the<sp/>dsc.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_new_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>==<sp/>NULL)<sp/>{<sp/></highlight><highlight class="comment">/*If<sp/>there<sp/>is<sp/>no<sp/>head<sp/>(first<sp/>node)<sp/>set<sp/>the<sp/>head<sp/>too*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_new_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__ll_8c_1aa5f4c88fb30d4ca40cf134362049adc6" kindref="member">lv_ll_get_head</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>head<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head<sp/>=<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>head;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__ll_8c_1a273405ac29ee068ffd53cf92b1b3b064" kindref="member">lv_ll_get_tail</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tail;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__ll_8c_1a98ae2188079b1aa00eec3b9a24974899" kindref="member">lv_ll_get_next</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_act)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>n_act_d<sp/>=<sp/>n_act;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;next,<sp/>n_act_d<sp/>+<sp/><ref refid="lv__ll_8c_1ac697b8b6519b655bc091216853afa66d" kindref="member">LL_NEXT_P_OFFSET</ref>(ll_p),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lv__ll_8c_1af150c35364287d518190c043512cc926" kindref="member">lv_ll_get_prev</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_act)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>n_act_d<sp/>=<sp/>n_act;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;prev,<sp/>n_act_d<sp/>+<sp/><ref refid="lv__ll_8c_1a7162ee79621282dc279ef8a8baef18a2" kindref="member">LL_PREV_P_OFFSET</ref>(ll_p),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prev;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">uint32_t<sp/><ref refid="lv__ll_8c_1a82019febbea0b40eb06b5358361c4793" kindref="member">lv_ll_get_len</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>node;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(node<sp/>=<sp/><ref refid="lv__ll_8c_1aa5f4c88fb30d4ca40cf134362049adc6" kindref="member">lv_ll_get_head</ref>(ll_p);<sp/>node<sp/>!=<sp/>NULL;<sp/>node<sp/>=<sp/><ref refid="lv__ll_8c_1a98ae2188079b1aa00eec3b9a24974899" kindref="member">lv_ll_get_next</ref>(ll_p,<sp/>node))<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len++;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8c_1a3e284235a8901ae95e864fef6553c441" kindref="member">lv_ll_swap</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n1_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n2_p)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)(ll_p);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)(n1_p);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)(n2_p);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*TODO*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8c_1ab059354e6df6d0c11c72f88532dbe49c" kindref="member">lv_ll_move_before</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_act,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_after)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_act<sp/>==<sp/>n_after)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*Can&apos;t<sp/>move<sp/>before<sp/>itself*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_before;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_after<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_before<sp/>=<sp/><ref refid="lv__ll_8c_1af150c35364287d518190c043512cc926" kindref="member">lv_ll_get_prev</ref>(ll_p,<sp/>n_after);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_before<sp/>=<sp/><ref refid="lv__ll_8c_1a273405ac29ee068ffd53cf92b1b3b064" kindref="member">lv_ll_get_tail</ref>(ll_p);<sp/></highlight><highlight class="comment">/*if<sp/>`n_after`<sp/>is<sp/>NULL<sp/>`n_act`<sp/>should<sp/>be<sp/>the<sp/>new<sp/>tail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_act<sp/>==<sp/>n_before)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*Already<sp/>before<sp/>`n_after`*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*It&apos;s<sp/>much<sp/>easier<sp/>to<sp/>remove<sp/>from<sp/>the<sp/>list<sp/>and<sp/>add<sp/>again*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__ll_8c_1a0ba26667008c1560823e3410f9885d9a" kindref="member">lv_ll_rem</ref>(ll_p,<sp/>n_act);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Add<sp/>again<sp/>by<sp/>setting<sp/>the<sp/>prev.<sp/>and<sp/>next<sp/>nodes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>n_before,<sp/>n_act);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>n_act,<sp/>n_before);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>node_set_prev(ll_p,<sp/>n_after,<sp/>n_act);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>node_set_next(ll_p,<sp/>n_act,<sp/>n_after);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>`n_act`<sp/>was<sp/>moved<sp/>before<sp/>NULL<sp/>then<sp/>it<sp/>become<sp/>the<sp/>new<sp/>tail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_after<sp/>==<sp/>NULL)<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>=<sp/>n_act;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>`n_act`<sp/>was<sp/>moved<sp/>before<sp/>`NULL`<sp/>then<sp/>it&apos;s<sp/>the<sp/>new<sp/>head*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n_before<sp/>==<sp/>NULL)<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>=<sp/>n_act;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lv__ll_8c_1a00c1406ac06d69ae8c057ac2a804a21b" kindref="member">lv_ll_is_empty</ref>(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ll_p-&gt;<ref refid="structlv__ll__t_1a9ed0ab1e930216ea787109442877abfc" kindref="member">head</ref><sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>ll_p-&gt;<ref refid="structlv__ll__t_1a633fc5158edd17d0e02f108a6fe042ad" kindref="member">tail</ref><sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/><sp/><sp/>STATIC<sp/>FUNCTIONS</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>node_set_prev(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>act,<sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>prev)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(act<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*Can&apos;t<sp/>set<sp/>the<sp/>prev<sp/>node<sp/>of<sp/>`NULL`*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>node_p_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prev)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(act<sp/>+<sp/><ref refid="lv__ll_8c_1a7162ee79621282dc279ef8a8baef18a2" kindref="member">LL_PREV_P_OFFSET</ref>(ll_p),<sp/>&amp;prev,<sp/>node_p_size);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(act<sp/>+<sp/><ref refid="lv__ll_8c_1a7162ee79621282dc279ef8a8baef18a2" kindref="member">LL_PREV_P_OFFSET</ref>(ll_p),<sp/>0,<sp/>node_p_size);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>node_set_next(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>act,<sp/><ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*<sp/>next)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(act<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*Can&apos;t<sp/>set<sp/>the<sp/>next<sp/>node<sp/>of<sp/>`NULL`*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>node_p_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" kindref="member">lv_ll_node_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(next)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(act<sp/>+<sp/><ref refid="lv__ll_8c_1ac697b8b6519b655bc091216853afa66d" kindref="member">LL_NEXT_P_OFFSET</ref>(ll_p),<sp/>&amp;next,<sp/>node_p_size);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(act<sp/>+<sp/><ref refid="lv__ll_8c_1ac697b8b6519b655bc091216853afa66d" kindref="member">LL_NEXT_P_OFFSET</ref>(ll_p),<sp/>0,<sp/>node_p_size);</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_ll.c"/>
  </compounddef>
</doxygen>
