<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lv__txt_8c" kind="file" language="C++">
    <compoundname>lv_txt.c</compoundname>
    <includes refid="lv__txt_8h" local="yes">lv_txt.h</includes>
    <includes refid="lv__math_8h" local="yes">lv_math.h</includes>
    <incdepgraph>
      <node id="3449">
        <label>stdbool.h</label>
      </node>
      <node id="3455">
        <label>lv_symbol_def.h</label>
        <link refid="lv__symbol__def_8h"/>
        <childnode refid="3448" relation="include">
        </childnode>
      </node>
      <node id="3450">
        <label>lv_area.h</label>
        <link refid="lv__area_8h"/>
        <childnode refid="3451" relation="include">
        </childnode>
        <childnode refid="3449" relation="include">
        </childnode>
        <childnode refid="3452" relation="include">
        </childnode>
        <childnode refid="3448" relation="include">
        </childnode>
      </node>
      <node id="3446">
        <label>/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c</label>
        <link refid="lv__txt_8c"/>
        <childnode refid="3447" relation="include">
        </childnode>
        <childnode refid="3456" relation="include">
        </childnode>
      </node>
      <node id="3447">
        <label>lv_txt.h</label>
        <link refid="lv__txt_8h"/>
        <childnode refid="3448" relation="include">
        </childnode>
        <childnode refid="3449" relation="include">
        </childnode>
        <childnode refid="3450" relation="include">
        </childnode>
        <childnode refid="3453" relation="include">
        </childnode>
      </node>
      <node id="3452">
        <label>stdint.h</label>
      </node>
      <node id="3453">
        <label>../lv_font/lv_font.h</label>
        <link refid="lv__font_8h"/>
        <childnode refid="3448" relation="include">
        </childnode>
        <childnode refid="3452" relation="include">
        </childnode>
        <childnode refid="3454" relation="include">
        </childnode>
        <childnode refid="3449" relation="include">
        </childnode>
        <childnode refid="3455" relation="include">
        </childnode>
      </node>
      <node id="3454">
        <label>stddef.h</label>
      </node>
      <node id="3448">
        <label>../../../lv_conf.h</label>
      </node>
      <node id="3451">
        <label>string.h</label>
      </node>
      <node id="3456">
        <label>lv_math.h</label>
        <link refid="lv__math_8h"/>
        <childnode refid="3452" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="lv__txt_8c_1ac490fc3d5f5dddb984086a42fd21fe01" prot="public" static="no">
        <name>NO_BREAK_FOUND</name>
        <initializer>UINT32_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="15" column="9" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lv__txt_8c_1af2f224ab11c9b048ae9c6fd1c66de6cd" prot="public" static="no" mutable="no">
        <type>uint8_t(*</type>
        <definition>uint8_t(* lv_txt_encoded_size) (const char *)</definition>
        <argsstring>)(const char *)</argsstring>
        <name>lv_txt_encoded_size</name>
        <initializer>= lv_txt_utf8_size</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Give the size of an encoded character <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a character in a string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the encoded character (1,2,3 ...). O in invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="53" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lv__txt_8c_1ad87a399285f0b4341ba5acded75f8617" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* lv_txt_unicode_to_encoded) (uint32_t)</definition>
        <argsstring>)(uint32_t)</argsstring>
        <name>lv_txt_unicode_to_encoded</name>
        <initializer>= lv_txt_unicode_to_utf8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an Unicode letter to encoded <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>letter_uni</parametername>
</parameternamelist>
<parameterdescription>
<para>an Unicode letter </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Encoded character in Little Endian to be compatible with C chars (e.g. &apos;Á&apos;, &apos;Ü&apos;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="54" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lv__txt_8c_1a700e7903b7c8f84c6c0e2e2dbfbb1d6f" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* lv_txt_encoded_conv_wc) (uint32_t)</definition>
        <argsstring>)(uint32_t)</argsstring>
        <name>lv_txt_encoded_conv_wc</name>
        <initializer>= lv_txt_utf8_conv_wc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a wide character, e.g. &apos;Á&apos; little endian to be compatible with the encoded format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a wide character </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>c</computeroutput> in the encoded format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="55" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* lv_txt_encoded_next) (const char *, uint32_t *)</definition>
        <argsstring>)(const char *, uint32_t *)</argsstring>
        <name>lv_txt_encoded_next</name>
        <initializer>= lv_txt_utf8_next</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decode the next encoded character from a string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to &apos;\0&apos; terminated string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>start index in &apos;txt&apos; where to start. After the call it will point to the next encoded char in &apos;txt&apos;. NULL to use txt[0] as index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the decoded Unicode character or 0 on invalid data code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="56" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lv__txt_8c_1a5bc1e9fda1ef5cf17c216fb334fff0a0" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* lv_txt_encoded_prev) (const char *, uint32_t *)</definition>
        <argsstring>)(const char *, uint32_t *)</argsstring>
        <name>lv_txt_encoded_prev</name>
        <initializer>= lv_txt_utf8_prev</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the previous encoded character form a string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to &apos;\0&apos; terminated string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_start</parametername>
</parameternamelist>
<parameterdescription>
<para>index in &apos;txt&apos; where to start. After the call it will point to the previous encoded char in &apos;txt&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the decoded Unicode character or 0 on invalid data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="57" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lv__txt_8c_1a94f39b83ccfff965ad67afdadcc21090" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* lv_txt_encoded_get_byte_id) (const char *, uint32_t)</definition>
        <argsstring>)(const char *, uint32_t)</argsstring>
        <name>lv_txt_encoded_get_byte_id</name>
        <initializer>= lv_txt_utf8_get_byte_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a letter index (in an the encoded text) to byte index. E.g. in UTF-8 &quot;AÁRT&quot; index of &apos;R&apos; is 2 but start at byte 3 because &apos;Á&apos; is 2 bytes long <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;\0&apos; terminated UTF-8 string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enc_id</parametername>
</parameternamelist>
<parameterdescription>
<para>letter index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>byte index of the &apos;enc_id&apos;th letter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="58" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lv__txt_8c_1a3795c7e14c113e462601317fc41ecfd8" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* lv_encoded_get_char_id) (const char *, uint32_t)</definition>
        <argsstring>)(const char *, uint32_t)</argsstring>
        <name>lv_encoded_get_char_id</name>
        <initializer>= lv_txt_utf8_get_char_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a byte index (in an encoded text) to character index. E.g. in UTF-8 &quot;AÁRT&quot; index of &apos;R&apos; is 2 but start at byte 3 because &apos;Á&apos; is 2 bytes long <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;\0&apos; terminated UTF-8 string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_id</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>character index of the letter at &apos;byte_id&apos;th position </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="59" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lv__txt_8c_1af79ef5fd547dd011922ef834f6f44a09" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* lv_txt_get_encoded_length) (const char *)</definition>
        <argsstring>)(const char *)</argsstring>
        <name>lv_txt_get_encoded_length</name>
        <initializer>= lv_txt_utf8_get_length</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of characters (and NOT bytes) in a string. E.g. in UTF-8 &quot;ÁBC&quot; is 3 characters (but 4 bytes) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;\0&apos; terminated char string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of characters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="60" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lv__txt_8c_1acfa4f3b4adf1ee7bbf8be2a3e898429c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_break_char</definition>
        <argsstring>(uint32_t letter)</argsstring>
        <name>is_break_char</name>
        <param>
          <type>uint32_t</type>
          <declname>letter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if char is break char or not (a text can broken here or not) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>letter</parametername>
</parameternamelist>
<parameterdescription>
<para>a letter </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: &apos;letter&apos; is not break char </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="24" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="714" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1add961163bfb7ed6f41f9dc330e74b51a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t lv_txt_utf8_size</definition>
        <argsstring>(const char *str)</argsstring>
        <name>lv_txt_utf8_size</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Give the size of an UTF-8 coded character <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a character in a string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the UTF-8 character (1,2,3 or 4). O on invalid code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="27" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="358" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a321902e7aff17e52ccc71bbed9a1a6be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t lv_txt_unicode_to_utf8</definition>
        <argsstring>(uint32_t letter_uni)</argsstring>
        <name>lv_txt_unicode_to_utf8</name>
        <param>
          <type>uint32_t</type>
          <declname>letter_uni</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an Unicode letter to UTF-8. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>letter_uni</parametername>
</parameternamelist>
<parameterdescription>
<para>an Unicode letter </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UTF-8 coded character in Little Endian to be compatible with C chars (e.g. &apos;Á&apos;, &apos;Ű&apos;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="28" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="376" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1ae26ecd3a95f199fe39db0bdef3def6f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t lv_txt_utf8_conv_wc</definition>
        <argsstring>(uint32_t c)</argsstring>
        <name>lv_txt_utf8_conv_wc</name>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a wide character, e.g. &apos;Á&apos; little endian to be UTF-8 compatible <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>a wide character or a Little endian number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>c</computeroutput> in big endian </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="29" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="407" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a2a6f4e0934f9ced015cfe055b0d881cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t lv_txt_utf8_next</definition>
        <argsstring>(const char *txt, uint32_t *i)</argsstring>
        <name>lv_txt_utf8_next</name>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decode an UTF-8 character from a string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to &apos;\0&apos; terminated string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>start byte index in &apos;txt&apos; where to start. After call it will point to the next UTF-8 char in &apos;txt&apos;. NULL to use txt[0] as index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the decoded Unicode character or 0 on invalid UTF-8 code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="30" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="434" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a98779a93c0e79dee6d89f1817a9d72fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t lv_txt_utf8_prev</definition>
        <argsstring>(const char *txt, uint32_t *i_start)</argsstring>
        <name>lv_txt_utf8_prev</name>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>i_start</declname>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous UTF-8 character form a string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to &apos;\0&apos; terminated string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>start byte index in &apos;txt&apos; where to start. After the call it will point to the previous UTF-8 char in &apos;txt&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the decoded Unicode character or 0 on invalid UTF-8 code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="31" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="507" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a120f3bcba800789aa485e57d288f423e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t lv_txt_utf8_get_byte_id</definition>
        <argsstring>(const char *txt, uint32_t utf8_id)</argsstring>
        <name>lv_txt_utf8_get_byte_id</name>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>utf8_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a character index (in an UTF-8 text) to byte index. E.g. in &quot;AÁRT&quot; index of &apos;R&apos; is 2th char but start at byte 3 because &apos;Á&apos; is 2 bytes long <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;\0&apos; terminated UTF-8 string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utf8_id</parametername>
</parameternamelist>
<parameterdescription>
<para>character index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>byte index of the &apos;utf8_id&apos;th letter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="32" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="540" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a9bfd167fc8c93a0612f37b1ebd9ada52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t lv_txt_utf8_get_char_id</definition>
        <argsstring>(const char *txt, uint32_t byte_id)</argsstring>
        <name>lv_txt_utf8_get_char_id</name>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a byte index (in an UTF-8 text) to character index. E.g. in &quot;AÁRT&quot; index of &apos;R&apos; is 2th char but start at byte 3 because &apos;Á&apos; is 2 bytes long <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;\0&apos; terminated UTF-8 string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_id</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>character index of the letter at &apos;byte_id&apos;th position </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="33" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="558" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a8b1fedd001c31e47f85b41361ed086db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t lv_txt_utf8_get_length</definition>
        <argsstring>(const char *txt)</argsstring>
        <name>lv_txt_utf8_get_length</name>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of characters (and NOT bytes) in a string. Decode it with UTF-8 if enabled. E.g.: &quot;ÁBC&quot; is 3 characters (but 4 bytes) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;\0&apos; terminated char string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of characters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="34" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="577" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a41c5a4332414d6d39a226942546693e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_txt_get_size</definition>
        <argsstring>(lv_point_t *size_res, const char *text, const lv_font_t *font, lv_coord_t letter_space, lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)</argsstring>
        <name>lv_txt_get_size</name>
        <param>
          <type><ref refid="structlv__point__t" kindref="compound">lv_point_t</ref> *</type>
          <declname>size_res</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const <ref refid="lv__font_8h_1aa379967edc40a171f22ab760d1292cf0" kindref="member">lv_font_t</ref> *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>lv_coord_t</type>
          <declname>letter_space</declname>
        </param>
        <param>
          <type>lv_coord_t</type>
          <declname>line_space</declname>
        </param>
        <param>
          <type>lv_coord_t</type>
          <declname>max_width</declname>
        </param>
        <param>
          <type><ref refid="lv__txt_8h_1aef596f679c6538e11b88da6fa0b16775" kindref="member">lv_txt_flag_t</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get size of a text <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_res</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a &apos;point_t&apos; variable to store the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>pinter to font of the text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letter_space</parametername>
</parameternamelist>
<parameterdescription>
<para>letter space of the text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txt.line_space</parametername>
</parameternamelist>
<parameterdescription>
<para>line space of the text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>settings for the text from &apos;txt_flag_t&apos; enum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_width</parametername>
</parameternamelist>
<parameterdescription>
<para>max with of the text (break the lines to fit this size) Set CORD_MAX to avoid line breaks </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="92" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="92" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a26dd5b8248d14e7ff96c8175ad6360df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t lv_txt_get_next_line</definition>
        <argsstring>(const char *txt, const lv_font_t *font, lv_coord_t letter_space, lv_coord_t max_width, lv_txt_flag_t flag)</argsstring>
        <name>lv_txt_get_next_line</name>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <param>
          <type>const <ref refid="lv__font_8h_1aa379967edc40a171f22ab760d1292cf0" kindref="member">lv_font_t</ref> *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>lv_coord_t</type>
          <declname>letter_space</declname>
        </param>
        <param>
          <type>lv_coord_t</type>
          <declname>max_width</declname>
        </param>
        <param>
          <type><ref refid="lv__txt_8h_1aef596f679c6538e11b88da6fa0b16775" kindref="member">lv_txt_flag_t</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the next line of text. Check line length and break chars too. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;\0&apos; terminated string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a font </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letter_space</parametername>
</parameternamelist>
<parameterdescription>
<para>letter space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_width</parametername>
</parameternamelist>
<parameterdescription>
<para>max with of the text (break the lines to fit this size) Set CORD_MAX to avoid line breaks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>settings for the text from &apos;txt_flag_type&apos; enum </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="143" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="143" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a396433a9f7d2ab592526434614d445bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>lv_coord_t</type>
        <definition>lv_coord_t lv_txt_get_width</definition>
        <argsstring>(const char *txt, uint16_t length, const lv_font_t *font, lv_coord_t letter_space, lv_txt_flag_t flag)</argsstring>
        <name>lv_txt_get_width</name>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="lv__font_8h_1aa379967edc40a171f22ab760d1292cf0" kindref="member">lv_font_t</ref> *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>lv_coord_t</type>
          <declname>letter_space</declname>
        </param>
        <param>
          <type><ref refid="lv__txt_8h_1aef596f679c6538e11b88da6fa0b16775" kindref="member">lv_txt_flag_t</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Give the length of a text with a given font <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;\0&apos; terminate string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of &apos;txt&apos; in byte count and not characters (Á is 1 character but 2 bytes in UTF-8) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a font </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letter_space</parametername>
</parameternamelist>
<parameterdescription>
<para>letter space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>settings for the text from &apos;txt_flag_t&apos; enum </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of a char_num long text </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="225" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="225" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1ae74787eaf9a427a0d9f6ec20382cd70a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lv_txt_is_cmd</definition>
        <argsstring>(lv_txt_cmd_state_t *state, uint32_t c)</argsstring>
        <name>lv_txt_is_cmd</name>
        <param>
          <type><ref refid="lv__txt_8h_1a2cfd2d8514ec2cd8bd2b350cc589579b" kindref="member">lv_txt_cmd_state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check next character in a string and decide if the character is part of the command or not <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a txt_cmd_state_t variable which stores the current state of command processing (Initied. to TXT_CMD_STATE_WAIT ) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the current character </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: the character is part of a command and should not be written, false: the character should be written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="271" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="271" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1abb5c7cc5e0d6519f45e022fb546b099e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_txt_ins</definition>
        <argsstring>(char *txt_buf, uint32_t pos, const char *ins_txt)</argsstring>
        <name>lv_txt_ins</name>
        <param>
          <type>char *</type>
          <declname>txt_buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ins_txt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a string into an other <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the original text (must be big enough for the result text) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position to insert. Expressed in character index and not byte index (Different in UTF-8) 0: before the original text, 1: after the first char etc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ins_txt</parametername>
</parameternamelist>
<parameterdescription>
<para>text to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="309" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="309" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="lv__txt_8c_1a90aa8be31361e94c6cb0575a4ed3ff12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lv_txt_cut</definition>
        <argsstring>(char *txt, uint32_t pos, uint32_t len)</argsstring>
        <name>lv_txt_cut</name>
        <param>
          <type>char *</type>
          <declname>txt</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a part of a string <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt</parametername>
</parameternamelist>
<parameterdescription>
<para>string to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position where to start the deleting (0: before the first char, 1: after the first char etc.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of characters to delete </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" line="333" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c" bodystart="333" bodyend="346"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>INCLUDES</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv__txt_8h" kindref="compound">lv_txt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv__math_8h" kindref="compound">lv_math.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>DEFINES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NO_BREAK_FOUND<sp/>UINT32_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>TYPEDEFS</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/>STATIC<sp/>PROTOTYPES</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_break_char(uint32_t<sp/>letter);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_TXT_ENC<sp/>==<sp/>LV_TXT_ENC_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>lv_txt_utf8_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_unicode_to_utf8(uint32_t<sp/>letter_uni);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_conv_wc(uint32_t<sp/>c);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_next(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_prev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>*<sp/>i_start);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_get_byte_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>utf8_id);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_get_char_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>byte_id);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_get_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>LV_TXT_ENC<sp/>==<sp/>LV_TXT_ENC_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>lv_txt_iso8859_1_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_unicode_to_iso8859_1(uint32_t<sp/>letter_uni);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_conv_wc(uint32_t<sp/>c);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_next(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_prev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>*<sp/>i_start);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_get_byte_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>utf8_id);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_get_char_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>byte_id);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_get_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>STATIC<sp/>VARIABLES</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>GLOBAL<sp/>VARIABLES</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_TXT_ENC<sp/>==<sp/>LV_TXT_ENC_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">uint8_t<sp/>(*<ref refid="lv__txt_8c_1af2f224ab11c9b048ae9c6fd1c66de6cd" kindref="member">lv_txt_encoded_size</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_utf8_size;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1ad87a399285f0b4341ba5acded75f8617" kindref="member">lv_txt_unicode_to_encoded</ref>)(uint32_t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_unicode_to_utf8;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1a700e7903b7c8f84c6c0e2e2dbfbb1d6f" kindref="member">lv_txt_encoded_conv_wc</ref>)(uint32_t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_utf8_conv_wc;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t<sp/>*)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_utf8_next;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1a5bc1e9fda1ef5cf17c216fb334fff0a0" kindref="member">lv_txt_encoded_prev</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t<sp/>*)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_utf8_prev;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1a94f39b83ccfff965ad67afdadcc21090" kindref="member">lv_txt_encoded_get_byte_id</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t)<sp/>=<sp/>lv_txt_utf8_get_byte_id;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1a3795c7e14c113e462601317fc41ecfd8" kindref="member">lv_encoded_get_char_id</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t)<sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_utf8_get_char_id;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1af79ef5fd547dd011922ef834f6f44a09" kindref="member">lv_txt_get_encoded_length</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_utf8_get_length;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>LV_TXT_ENC<sp/>==<sp/>LV_TXT_ENC_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">uint8_t<sp/>(*<ref refid="lv__txt_8c_1af2f224ab11c9b048ae9c6fd1c66de6cd" kindref="member">lv_txt_encoded_size</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_iso8859_1_size;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1ad87a399285f0b4341ba5acded75f8617" kindref="member">lv_txt_unicode_to_encoded</ref>)(uint32_t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_unicode_to_iso8859_1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1a700e7903b7c8f84c6c0e2e2dbfbb1d6f" kindref="member">lv_txt_encoded_conv_wc</ref>)(uint32_t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_iso8859_1_conv_wc;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t<sp/>*)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_iso8859_1_next;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1a5bc1e9fda1ef5cf17c216fb334fff0a0" kindref="member">lv_txt_encoded_prev</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t<sp/>*)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_iso8859_1_prev;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1a94f39b83ccfff965ad67afdadcc21090" kindref="member">lv_txt_encoded_get_byte_id</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t)<sp/>=<sp/>lv_txt_iso8859_1_get_byte_id;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1a3795c7e14c113e462601317fc41ecfd8" kindref="member">lv_encoded_get_char_id</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t)<sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_iso8859_1_get_char_id;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">uint32_t<sp/>(*<ref refid="lv__txt_8c_1af79ef5fd547dd011922ef834f6f44a09" kindref="member">lv_txt_get_encoded_length</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lv_txt_iso8859_1_get_length;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>MACROS</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GLOBAL<sp/>FUNCTIONS</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__txt_8c_1a41c5a4332414d6d39a226942546693e2" kindref="member">lv_txt_get_size</ref>(<ref refid="structlv__point__t" kindref="compound">lv_point_t</ref><sp/>*<sp/>size_res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__lv__font__struct" kindref="compound">lv_font_t</ref><sp/>*<sp/>font,<sp/>lv_coord_t<sp/>letter_space,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv_coord_t<sp/>line_space,<sp/>lv_coord_t<sp/>max_width,<sp/><ref refid="lv__txt_8h_1aef596f679c6538e11b88da6fa0b16775" kindref="member">lv_txt_flag_t</ref><sp/>flag)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>size_res-&gt;<ref refid="structlv__point__t_1adfa12860a9e02d054107cfcd4fde3d9e" kindref="member">x</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>size_res-&gt;<ref refid="structlv__point__t_1a4f11b93689ca9ee0e57734726cf187c0" kindref="member">y</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(text<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(font<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag<sp/>&amp;<sp/><ref refid="lv__txt_8h_1ab48899087cc647f0f791ed0c459adc53a0d31492dc51e93f00a5eb9b8d8507699" kindref="member">LV_TXT_FLAG_EXPAND</ref>)<sp/>max_width<sp/>=<sp/><ref refid="lv__area_8h_1afd59cbd057971f697443ef3cdfd44b9d" kindref="member">LV_COORD_MAX</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>line_start<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>new_line_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>lv_coord_t<sp/>act_line_length;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>letter_height<sp/>=<sp/>lv_font_get_line_height(font);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Calc.<sp/>the<sp/>height<sp/>and<sp/>longest<sp/>line*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(text[line_start]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_line_start<sp/>+=<sp/><ref refid="lv__txt_8c_1a26dd5b8248d14e7ff96c8175ad6360df" kindref="member">lv_txt_get_next_line</ref>(&amp;text[line_start],<sp/>font,<sp/>letter_space,<sp/>max_width,<sp/>flag);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_res-&gt;<ref refid="structlv__point__t_1a4f11b93689ca9ee0e57734726cf187c0" kindref="member">y</ref><sp/>+=<sp/>letter_height;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_res-&gt;<ref refid="structlv__point__t_1a4f11b93689ca9ee0e57734726cf187c0" kindref="member">y</ref><sp/>+=<sp/>line_space;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Calculate<sp/>the<sp/>the<sp/>longest<sp/>line*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>act_line_length<sp/>=<sp/><ref refid="lv__txt_8c_1a396433a9f7d2ab592526434614d445bc" kindref="member">lv_txt_get_width</ref>(&amp;text[line_start],<sp/>new_line_start<sp/>-<sp/>line_start,<sp/>font,<sp/>letter_space,<sp/>flag);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_res-&gt;<ref refid="structlv__point__t_1adfa12860a9e02d054107cfcd4fde3d9e" kindref="member">x</ref><sp/>=<sp/><ref refid="lv__math_8h_1ae532fd7eb3f50c685401c8ddc49755aa" kindref="member">LV_MATH_MAX</ref>(act_line_length,<sp/>size_res-&gt;<ref refid="structlv__point__t_1adfa12860a9e02d054107cfcd4fde3d9e" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_start<sp/><sp/>=<sp/>new_line_start;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Ma<sp/>ke<sp/>the<sp/>text<sp/>one<sp/>line<sp/>taller<sp/>if<sp/>the<sp/>last<sp/>character<sp/>is<sp/>&apos;\n&apos;<sp/>or<sp/>&apos;\r&apos;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((line_start<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>(text[line_start<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>text[line_start<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_res-&gt;<ref refid="structlv__point__t_1a4f11b93689ca9ee0e57734726cf187c0" kindref="member">y</ref><sp/>+=<sp/>letter_height<sp/>+<sp/>line_space;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Correction<sp/>with<sp/>the<sp/>last<sp/>line<sp/>space<sp/>or<sp/>set<sp/>the<sp/>height<sp/>manually<sp/>if<sp/>the<sp/>text<sp/>is<sp/>empty*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size_res-&gt;<ref refid="structlv__point__t_1a4f11b93689ca9ee0e57734726cf187c0" kindref="member">y</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_res-&gt;<ref refid="structlv__point__t_1a4f11b93689ca9ee0e57734726cf187c0" kindref="member">y</ref><sp/>=<sp/>letter_height;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_res-&gt;<ref refid="structlv__point__t_1a4f11b93689ca9ee0e57734726cf187c0" kindref="member">y</ref><sp/>-=<sp/>line_space;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">uint16_t<sp/><ref refid="lv__txt_8c_1a26dd5b8248d14e7ff96c8175ad6360df" kindref="member">lv_txt_get_next_line</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__lv__font__struct" kindref="compound">lv_font_t</ref><sp/>*<sp/>font,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv_coord_t<sp/>letter_space,<sp/>lv_coord_t<sp/>max_width,<sp/><ref refid="lv__txt_8h_1aef596f679c6538e11b88da6fa0b16775" kindref="member">lv_txt_flag_t</ref><sp/>flag)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(txt<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(font<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag<sp/>&amp;<sp/>LV_TXT_FLAG_EXPAND)<sp/>max_width<sp/>=<sp/><ref refid="lv__area_8h_1afd59cbd057971f697443ef3cdfd44b9d" kindref="member">LV_COORD_MAX</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i_next<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>lv_coord_t<sp/>cur_w<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>last_break<sp/>=<sp/><ref refid="lv__txt_8c_1ac490fc3d5f5dddb984086a42fd21fe01" kindref="member">NO_BREAK_FOUND</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__txt_8h_1a2cfd2d8514ec2cd8bd2b350cc589579b" kindref="member">lv_txt_cmd_state_t</ref><sp/>cmd_state<sp/>=<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609a92b3b95248c0b119d275be325b760043" kindref="member">LV_TXT_CMD_STATE_WAIT</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>letter_w;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>letter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>letter_next<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>letter_next<sp/>=<sp/><ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>(txt,<sp/>&amp;i_next);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(txt[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter<sp/>=<sp/>letter_next;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>i_next;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter_next<sp/>=<sp/><ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>(txt,<sp/>&amp;i_next);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Handle<sp/>the<sp/>recolor<sp/>command*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((flag<sp/>&amp;<sp/><ref refid="lv__txt_8h_1ab48899087cc647f0f791ed0c459adc53a688d222b2448236bcf1316494e7f1cf3" kindref="member">LV_TXT_FLAG_RECOLOR</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="lv__txt_8c_1ae74787eaf9a427a0d9f6ec20382cd70a" kindref="member">lv_txt_is_cmd</ref>(&amp;cmd_state,<sp/>letter)<sp/>!=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="comment">/*Skip<sp/>the<sp/>letter<sp/>is<sp/>it<sp/>is<sp/>part<sp/>of<sp/>a<sp/>command*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Check<sp/>for<sp/>new<sp/>line<sp/>chars*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>letter<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Return<sp/>with<sp/>the<sp/>first<sp/>letter<sp/>of<sp/>the<sp/>next<sp/>line*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><sp/>letter_next<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i_next;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*Check<sp/>the<sp/>actual<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter_w<sp/>=<sp/><ref refid="lv__font_8c_1aa5d36298f9831f65e9c6dd8dc3dfd60f" kindref="member">lv_font_get_glyph_width</ref>(font,<sp/>letter,<sp/>letter_next);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_w<sp/>+=<sp/>letter_w;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>the<sp/>txt<sp/>is<sp/>too<sp/>long<sp/>then<sp/>finish,<sp/>this<sp/>is<sp/>the<sp/>line<sp/>end*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cur_w<sp/>&gt;<sp/>max_width)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>a<sp/>break<sp/>character<sp/>was<sp/>already<sp/>found<sp/>break<sp/>there*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(last_break<sp/>!=<sp/><ref refid="lv__txt_8c_1ac490fc3d5f5dddb984086a42fd21fe01" kindref="member">NO_BREAK_FOUND</ref>)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>last_break;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>this<sp/>character<sp/>is<sp/>out<sp/>of<sp/>the<sp/>area<sp/>so<sp/>it<sp/>will<sp/>be<sp/>first<sp/>character<sp/>of<sp/>the<sp/>next<sp/>line*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>But<sp/>&apos;i&apos;<sp/>already<sp/>points<sp/>to<sp/>the<sp/>next<sp/>character<sp/>(because<sp/>of<sp/>lv_txt_utf8_next)<sp/>step<sp/>beck<sp/>one*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__txt_8c_1a5bc1e9fda1ef5cf17c216fb334fff0a0" kindref="member">lv_txt_encoded_prev</ref>(txt,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>let<sp/>to<sp/>return<sp/>without<sp/>doing<sp/>nothing.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Find<sp/>at<sp/>least<sp/>one<sp/>character<sp/>(Avoid<sp/>infinite<sp/>loop<sp/>)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>0)<sp/><ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>(txt,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>this<sp/>char<sp/>still<sp/>can<sp/>fit<sp/>to<sp/>this<sp/>line<sp/>then<sp/>check<sp/>if</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>txt<sp/>can<sp/>be<sp/>broken<sp/>here<sp/>later<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_break_char(letter))<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_break<sp/>=<sp/>i;<sp/></highlight><highlight class="comment">/*Save<sp/>the<sp/>first<sp/>char<sp/>index<sp/>after<sp/>break*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter_w<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_w<sp/>+=<sp/>letter_space;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">lv_coord_t<sp/><ref refid="lv__txt_8c_1a396433a9f7d2ab592526434614d445bc" kindref="member">lv_txt_get_width</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint16_t<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct__lv__font__struct" kindref="compound">lv_font_t</ref><sp/>*<sp/>font,<sp/>lv_coord_t<sp/>letter_space,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__txt_8h_1aef596f679c6538e11b88da6fa0b16775" kindref="member">lv_txt_flag_t</ref><sp/>flag)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(txt<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(font<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>lv_coord_t<sp/>width<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lv__txt_8h_1a2cfd2d8514ec2cd8bd2b350cc589579b" kindref="member">lv_txt_cmd_state_t</ref><sp/>cmd_state<sp/>=<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609a92b3b95248c0b119d275be325b760043" kindref="member">LV_TXT_CMD_STATE_WAIT</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>letter;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>letter_next;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i<sp/>&lt;<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>(txt,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter_next<sp/>=<sp/><ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>(&amp;txt[i],<sp/>NULL);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((flag<sp/>&amp;<sp/>LV_TXT_FLAG_RECOLOR)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="lv__txt_8c_1ae74787eaf9a427a0d9f6ec20382cd70a" kindref="member">lv_txt_is_cmd</ref>(&amp;cmd_state,<sp/>letter)<sp/>!=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lv_coord_t<sp/>char_width<sp/>=<sp/><ref refid="lv__font_8c_1aa5d36298f9831f65e9c6dd8dc3dfd60f" kindref="member">lv_font_get_glyph_width</ref>(font,<sp/>letter,<sp/>letter_next);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(char_width<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>+=<sp/>char_width;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>+=<sp/>letter_space;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(width<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>-=<sp/>letter_space;<sp/></highlight><highlight class="comment">/*Trim<sp/>the<sp/>last<sp/>letter<sp/>space.<sp/>Important<sp/>if<sp/>the<sp/>text<sp/>is<sp/>center</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aligned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lv__txt_8c_1ae74787eaf9a427a0d9f6ec20382cd70a" kindref="member">lv_txt_is_cmd</ref>(<ref refid="lv__txt_8h_1a2cfd2d8514ec2cd8bd2b350cc589579b" kindref="member">lv_txt_cmd_state_t</ref><sp/>*<sp/>state,<sp/>uint32_t<sp/>c)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>==<sp/>(uint32_t)<ref refid="lv__txt_8h_1aba8ec1367cc2659baa285f32979caa31" kindref="member">LV_TXT_COLOR_CMD</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*state<sp/>==<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609a92b3b95248c0b119d275be325b760043" kindref="member">LV_TXT_CMD_STATE_WAIT</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*Start<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*state<sp/>=<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609aed901a7b3a77f89da816961380489d31" kindref="member">LV_TXT_CMD_STATE_PAR</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Other<sp/>start<sp/>char<sp/>in<sp/>parameter<sp/>is<sp/>escaped<sp/>cmd.<sp/>char<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*state<sp/>==<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609aed901a7b3a77f89da816961380489d31" kindref="member">LV_TXT_CMD_STATE_PAR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*state<sp/>=<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609a92b3b95248c0b119d275be325b760043" kindref="member">LV_TXT_CMD_STATE_WAIT</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Command<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*state<sp/>==<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609a646b0bbf16e79c17e57e9ec967c6604f" kindref="member">LV_TXT_CMD_STATE_IN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*state<sp/>=<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609a92b3b95248c0b119d275be325b760043" kindref="member">LV_TXT_CMD_STATE_WAIT</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Skip<sp/>the<sp/>color<sp/>parameter<sp/>and<sp/>wait<sp/>the<sp/>space<sp/>after<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*state<sp/>==<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609aed901a7b3a77f89da816961380489d31" kindref="member">LV_TXT_CMD_STATE_PAR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*state<sp/>=<sp/><ref refid="lv__txt_8h_1a458e651af6690959efa2afb96be7d609a646b0bbf16e79c17e57e9ec967c6604f" kindref="member">LV_TXT_CMD_STATE_IN</ref>;<sp/></highlight><highlight class="comment">/*After<sp/>the<sp/>parameter<sp/>the<sp/>text<sp/>is<sp/>in<sp/>the<sp/>command*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__txt_8c_1abb5c7cc5e0d6519f45e022fb546b099e" kindref="member">lv_txt_ins</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt_buf,<sp/>uint32_t<sp/>pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>ins_txt)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>old_len<sp/>=<sp/>strlen(txt_buf);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ins_len<sp/>=<sp/>strlen(ins_txt);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>new_len<sp/>=<sp/>ins_len<sp/>+<sp/>old_len;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="lv__txt_8c_1a94f39b83ccfff965ad67afdadcc21090" kindref="member">lv_txt_encoded_get_byte_id</ref>(txt_buf,<sp/>pos);<sp/></highlight><highlight class="comment">/*Convert<sp/>to<sp/>byte<sp/>index<sp/>instead<sp/>of<sp/>letter<sp/>index*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Copy<sp/>the<sp/>second<sp/>part<sp/>into<sp/>the<sp/>end<sp/>to<sp/>make<sp/>place<sp/>to<sp/>text<sp/>to<sp/>insert*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>new_len;<sp/>i<sp/>&gt;=<sp/>pos<sp/>+<sp/>ins_len;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txt_buf[i]<sp/>=<sp/>txt_buf[i<sp/>-<sp/>ins_len];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>text<sp/>into<sp/>the<sp/>new<sp/>space*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(txt_buf<sp/>+<sp/>pos,<sp/>ins_txt,<sp/>ins_len);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lv__txt_8c_1a90aa8be31361e94c6cb0575a4ed3ff12" kindref="member">lv_txt_cut</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>pos,<sp/>uint32_t<sp/>len)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>old_len<sp/>=<sp/>strlen(txt);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/><ref refid="lv__txt_8c_1a94f39b83ccfff965ad67afdadcc21090" kindref="member">lv_txt_encoded_get_byte_id</ref>(txt,<sp/>pos);<sp/></highlight><highlight class="comment">/*Convert<sp/>to<sp/>byte<sp/>index<sp/>instead<sp/>of<sp/>letter<sp/>index*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/><ref refid="lv__txt_8c_1a94f39b83ccfff965ad67afdadcc21090" kindref="member">lv_txt_encoded_get_byte_id</ref>(&amp;txt[pos],<sp/>len);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Copy<sp/>the<sp/>second<sp/>part<sp/>into<sp/>the<sp/>end<sp/>to<sp/>make<sp/>place<sp/>to<sp/>text<sp/>to<sp/>insert*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>pos;<sp/>i<sp/>&lt;=<sp/>old_len<sp/>-<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txt[i]<sp/>=<sp/>txt[i<sp/>+<sp/>len];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LV_TXT_ENC<sp/>==<sp/>LV_TXT_ENC_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/*******************************</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/><sp/><sp/>UTF-8<sp/>ENCODER/DECOER</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>lv_txt_utf8_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((str[0]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((str[0]<sp/>&amp;<sp/>0xE0)<sp/>==<sp/>0xC0)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((str[0]<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xE0)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((str[0]<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0xF0)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">/*If<sp/>the<sp/>char<sp/>was<sp/>invalid<sp/>step<sp/>tell<sp/>it&apos;s<sp/>1<sp/>byte<sp/>long*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_unicode_to_utf8(uint32_t<sp/>letter_uni)</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter_uni<sp/>&lt;<sp/>128)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>letter_uni;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bytes[4];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter_uni<sp/>&lt;<sp/>0x0800)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[0]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x1F)<sp/>|<sp/>0xC0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[1]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>0)<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter_uni<sp/>&lt;<sp/>0x010000)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[0]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x0F)<sp/>|<sp/>0xE0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[1]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[2]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>0)<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter_uni<sp/>&lt;<sp/>0x110000)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[0]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>18)<sp/>&amp;<sp/>0x07)<sp/>|<sp/>0xF0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[1]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[2]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[3]<sp/>=<sp/>((letter_uni<sp/>&gt;&gt;<sp/>0)<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>res_p<sp/>=<sp/>(uint32_t<sp/>*)bytes;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*res_p;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_conv_wc(uint32_t<sp/>c)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Swap<sp/>the<sp/>bytes<sp/>(UTF-8<sp/>is<sp/>big<sp/>endian,<sp/>but<sp/>the<sp/>MCUs<sp/>are<sp/>little<sp/>endian)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((c<sp/>&amp;<sp/>0x80)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>swapped;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>c8[4];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(c8,<sp/>&amp;c,<sp/>4);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapped<sp/>=<sp/>(c8[0]<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>(c8[1]<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(c8[2]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(c8[3]);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((swapped<sp/>&amp;<sp/>0xFF)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapped<sp/>=<sp/>(swapped<sp/>&gt;&gt;<sp/>8);<sp/></highlight><highlight class="comment">/*Ignore<sp/>leading<sp/>zeros<sp/>(they<sp/>were<sp/>in<sp/>the<sp/>end<sp/>originally)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>swapped;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_next(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>*<sp/>i)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>to<sp/>UTF-8</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>00000000<sp/>00000000<sp/>00000000<sp/>0xxxxxxx<sp/>-&gt;<sp/>0xxxxxxx</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>00000000<sp/>00000000<sp/>00000yyy<sp/>yyxxxxxx<sp/>-&gt;<sp/>110yyyyy<sp/>10xxxxxx</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>00000000<sp/>00000000<sp/>zzzzyyyy<sp/>yyxxxxxx<sp/>-&gt;<sp/>1110zzzz<sp/>10yyyyyy<sp/>10xxxxxx</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>00000000<sp/>000wwwzz<sp/>zzzzyyyy<sp/>yyxxxxxx<sp/>-&gt;<sp/>11110www<sp/>10zzzzzz<sp/>10yyyyyy<sp/>10xxxxxx</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Dummy<sp/>&apos;i&apos;<sp/>pointer<sp/>is<sp/>required*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i_tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>NULL)<sp/>i<sp/>=<sp/>&amp;i_tmp;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Normal<sp/>ASCII*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>txt[*i];</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Real<sp/>UTF-8<sp/>decode*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*2<sp/>bytes<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xE0)<sp/>==<sp/>0xC0)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(uint32_t)(txt[*i]<sp/>&amp;<sp/>0x1F)<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*Invalid<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>(txt[*i]<sp/>&amp;<sp/>0x3F);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*3<sp/>bytes<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xE0)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(uint32_t)(txt[*i]<sp/>&amp;<sp/>0x0F)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*Invalid<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>(uint32_t)(txt[*i]<sp/>&amp;<sp/>0x3F)<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*Invalid<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>(txt[*i]<sp/>&amp;<sp/>0x3F);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*4<sp/>bytes<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0xF0)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(uint32_t)(txt[*i]<sp/>&amp;<sp/>0x07)<sp/>&lt;&lt;<sp/>18;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*Invalid<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>(uint32_t)(txt[*i]<sp/>&amp;<sp/>0x3F)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*Invalid<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>(uint32_t)(txt[*i]<sp/>&amp;<sp/>0x3F)<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((txt[*i]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*Invalid<sp/>UTF-8<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>txt[*i]<sp/>&amp;<sp/>0x3F;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)++;<sp/></highlight><highlight class="comment">/*Not<sp/>UTF-8<sp/>char.<sp/>Go<sp/>the<sp/>next.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_prev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>*<sp/>i)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>c_size;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Try<sp/>to<sp/>find<sp/>a<sp/>!0<sp/>long<sp/>UTF-8<sp/>char<sp/>by<sp/>stepping<sp/>one<sp/>character<sp/>back*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>(*i)--;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cnt<sp/>&gt;=<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*No<sp/>UTF-8<sp/>char<sp/>found<sp/>before<sp/>the<sp/>initial*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_size<sp/>=<sp/><ref refid="lv__txt_8c_1af2f224ab11c9b048ae9c6fd1c66de6cd" kindref="member">lv_txt_encoded_size</ref>(&amp;txt[*i]);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*i<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*i)--;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(c_size<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i_tmp<sp/><sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>letter<sp/>=<sp/><ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>(txt,<sp/>&amp;i_tmp);<sp/></highlight><highlight class="comment">/*Character<sp/>found,<sp/>get<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>letter;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_get_byte_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>utf8_id)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>byte_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>utf8_id;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte_cnt<sp/>+=<sp/><ref refid="lv__txt_8c_1af2f224ab11c9b048ae9c6fd1c66de6cd" kindref="member">lv_txt_encoded_size</ref>(&amp;txt[byte_cnt]);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte_cnt;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_get_char_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>byte_id)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>char_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i<sp/>&lt;<sp/>byte_id)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>(txt,<sp/>&amp;i);<sp/></highlight><highlight class="comment">/*&apos;i&apos;<sp/>points<sp/>to<sp/>the<sp/>next<sp/>letter<sp/>so<sp/>use<sp/>the<sp/>prev.<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char_cnt++;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char_cnt;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_utf8_get_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(txt[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lv__txt_8c_1ad2cfa4b19d97ed3dd4b699c9ade7d427" kindref="member">lv_txt_encoded_next</ref>(txt,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len++;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>LV_TXT_ENC<sp/>==<sp/>LV_TXT_ENC_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">/*******************************</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/><sp/>ASCII<sp/>ENCODER/DECOER</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>lv_txt_iso8859_1_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)str;<sp/></highlight><highlight class="comment">/*Unused*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_unicode_to_iso8859_1(uint32_t<sp/>letter_uni)</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter_uni<sp/>&lt;<sp/>128)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>letter_uni;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_conv_wc(uint32_t<sp/>c)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_next(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>*<sp/>i)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>txt[1];<sp/></highlight><highlight class="comment">/*Get<sp/>the<sp/>next<sp/>char<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>letter<sp/>=<sp/>txt[*i];</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>(*i)++;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>letter;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_prev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>*<sp/>i)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(txt<sp/>-<sp/>1);<sp/></highlight><highlight class="comment">/*Get<sp/>the<sp/>prev.<sp/>char<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>(*i)--;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>letter<sp/>=<sp/>txt[*i];</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>letter;</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_get_byte_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>utf8_id)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)txt;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Unused*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>utf8_id;<sp/></highlight><highlight class="comment">/*In<sp/>Non<sp/>encoded<sp/>no<sp/>difference*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_get_char_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt,<sp/>uint32_t<sp/>byte_id)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)txt;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Unused*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte_id;<sp/></highlight><highlight class="comment">/*In<sp/>Non<sp/>encoded<sp/>no<sp/>difference*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>lv_txt_iso8859_1_get_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt)</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strlen(txt);</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Invalid<sp/>character<sp/>encoding.<sp/>See<sp/>`LV_TXT_ENC`<sp/>in<sp/>`lv_conf.h`&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/><sp/><sp/>STATIC<sp/>FUNCTIONS</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_break_char(uint32_t<sp/>letter)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Compare<sp/>the<sp/>letter<sp/>to<sp/>TXT_BREAK_CHARS*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/><ref refid="lv__conf__checker_8h_1a39568ba761e0c4ce5af64132e036a7e4" kindref="member">LV_TXT_BREAK_CHARS</ref>[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(letter<sp/>==<sp/>(uint32_t)<ref refid="lv__conf__checker_8h_1a39568ba761e0c4ce5af64132e036a7e4" kindref="member">LV_TXT_BREAK_CHARS</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*If<sp/>match<sp/>then<sp/>it<sp/>is<sp/>break<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/pc_simulator_sdl_eclipse/lvgl/src/lv_misc/lv_txt.c"/>
  </compounddef>
</doxygen>
